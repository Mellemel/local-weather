{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/weather.js","src/js/app.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","WeatherModel","data","this","location","currentWeather","forecast","unit","unitChange","Event","WeatherView","model","elements","_model","_elements","unitButtonClicked","_this","attach","convertUnits","WeatherCtrl","view","_view","convertUnit","sender","_sender","_listeners","prototype","toCelsius","num","Math","round","toFahrenheit","_this2","temp","forEach","day","high","low","notify","show","cc","html","city","region","date","text","index","init","button","$","todayWeather","highWeather","lowWeather","click","_this3","listener","push","args","Model","View","Ctrl","2","weather","document","ready","ip","url","format","get","sanitizeData","dateOptions","weekday","month","hour","minute","Date","toLocaleTimeString","replace","parseInt","object","getJSON","state","test","split","w","query","encodeURI","setting","then","intel","results","channel","item","condition","./weather.js"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The Model. Model stores items and notifies\n * observers about changes.\n */\nfunction WeatherModel(data) {\n  this.location = data.location\n  this.currentWeather = data.currentWeather\n  this.forecast = data.forecast\n  this.unit = 'F'\n\n  this.unitChange = new Event(this)\n}\n\nWeatherModel.prototype = {\n  toCelsius: function (num) {\n    return Math.round((num - 32) * 5 / 9)\n  },\n  toFahrenheit: function (num) {\n    return Math.round((num * 9 / 5) + 32)\n  },\n  convertUnit: function () {\n    if (this.unit === 'F') {\n      this.currentWeather.temp = this.toCelsius(this.currentWeather.temp)\n      this.forecast.forEach((day) => {\n        day.high = this.toCelsius(day.high)\n        day.low = this.toCelsius(day.low)\n      })\n      this.unit = 'C'\n      this.unitChange.notify()\n    } else {\n      this.currentWeather.temp = this.toFahrenheit(this.currentWeather.temp)\n      this.forecast.forEach((day) => {\n        day.high = this.toFahrenheit(day.high)\n        day.low = this.toFahrenheit(day.low)\n      })\n      this.unit = 'F'\n      this.unitChange.notify()\n    }\n  }\n}\n\n/**\n * The View. View presents the model and provides\n * the UI events. The controller is attached to these\n * events to handle the user interraction.\n */\nfunction WeatherView(model, elements) {\n  this._model = model\n  this._elements = elements\n\n  this.unitButtonClicked = new Event(this)\n\n  var _this = this\n\n  // attach model listeners\n  this._model.unitChange.attach(() => {\n    _this.convertUnits()\n  })\n}\n\nWeatherView.prototype = {\n  show: function () {\n    let location = this._elements.location,\n      cc = this._elements.currentWeather,\n      forecast = this._elements.forecast,\n      model = this._model\n\n    location.html(model.location.city + ', ' + model.location.region)\n\n    cc.html(\n      '<h3>' + model.currentWeather.date + '</h3>' +\n      '<h1><span id=\"todayWeather\">' + model.currentWeather.temp + '</span>&deg;<button id=\"button\" class=\"unit btn btn-primary\">F</button></h1>' +\n      '<h3>' + model.currentWeather.text + '</h3>'\n    )\n\n    forecast.html((index) => {\n      return '<td>' + model.forecast[index].day + '</td>' +\n        '<td>' + model.forecast[index].date + '</td>' +\n        '<td><span class=\"hweather\">' + model.forecast[index].high + '</span>&deg;<span class=\"unit\">F</span></td>' +\n        '<td><span class=\"lweather\">' + model.forecast[index].low + '</span>&deg;<span class=\"unit\">F</span></td>' +\n        '<td>' + model.forecast[index].text + '</td>'\n    })\n    return this\n\n  },\n  init: function () {\n    this._elements.button = $('#button')\n    this._elements.unit = $('.unit')\n    this._elements.todayWeather = $('#todayWeather')\n    this._elements.highWeather = $('.hweather')\n    this._elements.lowWeather = $('.lweather')\n\n    // attach listeners to HTML controls\n    var _this = this\n    this._elements.button.click(() => {\n      _this.unitButtonClicked.notify()\n    })\n  },\n  convertUnits: function () {\n    this._elements.unit.text(this._model.unit)\n\n    this._elements.todayWeather.text(this._model.currentWeather.temp)\n\n    this._elements.highWeather.text((index) => {\n      return this._model.forecast[index].high\n    })\n    this._elements.lowWeather.text((index) => {\n      return this._model.forecast[index].low\n    })\n  }\n}\n\n/**\n * The Controller. Controller responds to user actions and\n * invokes changes on the model.\n */\nfunction WeatherCtrl(model, view) {\n  this._model = model\n  this._view = view\n\n  var _this = this\n\n  this._view.unitButtonClicked.attach(() => {\n    _this.convertUnit()\n  })\n}\n\nWeatherCtrl.prototype = {\n  convertUnit: function () {\n    this._model.convertUnit()\n  }\n}\n\nfunction Event(sender) {\n  this._sender = sender\n  this._listeners = []\n}\n\nEvent.prototype = {\n  attach: function (listener) {\n    this._listeners.push(listener)\n  },\n  notify: function (args) {\n    for (let i = 0; i < this._listeners.length; i++) {\n      this._listeners[i](this._sender, args)\n    }\n  }\n}\n\nmodule.exports = {\n  Model: WeatherModel,\n  View: WeatherView,\n  Ctrl: WeatherCtrl\n}","var weather = require('./weather.js')\n\n$(document).ready(() => {\n\n  let ip = {\n    url: 'https://api.ipify.org',\n    format: '?format=json'\n  }\n\n  // retrieve ip address\n  $.get(ip.url + ip.format, (data) => {\n    let location = {\n      url: 'https://freegeoip.net/',\n      format: 'json/',\n      ip: data.ip\n    }\n\n    // get location of ip address\n    $.getJSON(location.url + location.format + location.ip, (data) => {\n      let city = data['city'], state = data['region_code']\n      if (/the/gi.test(city)) {\n        city = city.split(' ')[1]\n      }\n\n      // get weather info from yahooapis\n      let w = {\n        url: 'http://query.yahooapis.com/v1/public/yql?q=',\n        query: encodeURI('select * from weather.forecast where woeid in (select woeid from geo.places(1) where text=\"' + city + ', ' + state + '\")'),\n        setting: '&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys'\n      }\n\n      $.getJSON(w.url + w.query + w.setting).then((data) => {\n        var intel = {\n          location: data.query.results.channel.location,\n          currentWeather: data.query.results.channel.item.condition,\n          forecast: data.query.results.channel.item.forecast\n        }\n\n        sanitizeData(intel)\n        \n        var model = new weather.Model(intel)\n        var view = new weather.View(model, {\n          location: $('#location'),\n          currentWeather: $('#today'),\n          forecast: $('.day')\n        })\n        var controller = new weather.Ctrl(model, view)\n\n        view.show().init()\n      })\n    })\n    function sanitizeData(data) {\n      let dateOptions = {\n        weekday: 'short', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit'\n      }\n      data.currentWeather.date = new Date(data.currentWeather.date).toLocaleTimeString('en-us', dateOptions).replace(/,\\s/g, '-')\n      data.currentWeather.temp = parseInt(data.currentWeather.temp)\n      data.forecast.forEach((object) => {\n        object.high = parseInt(object.high)\n        object.low = parseInt(object.low)\n      })\n    }\n  })\n})"],"sourceRoot":"/source/"}