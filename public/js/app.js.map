{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/moment/moment.js","app.js","src/js/weather.js","src/js/app.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","global","factory","_typeof","define","amd","moment","this","utils_hooks__hooks","hookCallback","apply","arguments","setHookCallback","callback","isArray","input","Array","Object","prototype","toString","isObject","isObjectEmpty","obj","k","isDate","Date","map","arr","fn","res","push","hasOwnProp","b","hasOwnProperty","extend","valueOf","create_utc__createUTC","format","locale","strict","createLocalOrUTC","utc","defaultParsingFlags","empty","unusedTokens","unusedInput","overflow","charsLeftOver","nullInput","invalidMonth","invalidFormat","userInvalidated","iso","parsedDateParts","meridiem","getParsingFlags","m","_pf","valid__isValid","_isValid","flags","parsedParts","some","isNaN","_d","getTime","invalidWeekday","_strict","undefined","bigHour","valid__createInvalid","NaN","isUndefined","copyConfig","to","from","prop","val","_isAMomentObject","_i","_f","_l","_tzm","_isUTC","_offset","_locale","momentProperties","Moment","config","updateInProgress","updateOffset","isMoment","absFloor","number","Math","ceil","floor","toInt","argumentForCoercion","coercedNumber","value","isFinite","compareArrays","array1","array2","dontConvert","len","min","lengthDiff","abs","diffs","warn","msg","suppressDeprecationWarnings","console","deprecate","firstTime","deprecationHandler","slice","join","stack","deprecateSimple","name","deprecations","isFunction","Function","locale_set__set","_config","_ordinalParseLenient","RegExp","_ordinalParse","source","mergeConfigs","parentConfig","childConfig","Locale","set","locale_calendar__calendar","key","mom","now","output","_calendar","longDateFormat","_longDateFormat","formatUpper","toUpperCase","replace","invalidDate","_invalidDate","ordinal","_ordinal","relative__relativeTime","withoutSuffix","string","isFuture","_relativeTime","pastFuture","diff","addUnitAlias","unit","shorthand","lowerCase","toLowerCase","aliases","normalizeUnits","units","normalizeObjectUnits","inputObject","normalizedProp","normalizedInput","addUnitPriority","priority","priorities","getPrioritizedUnits","unitsObj","sort","makeGetSet","keepTime","get_set__set","get_set__get","isValid","stringGet","stringSet","prioritized","zeroFill","targetLength","forceSign","absNumber","zerosToFill","sign","pow","max","substr","addFormatToken","token","padded","func","formatTokenFunctions","localeData","removeFormattingTokens","match","makeFormatFunction","array","formattingTokens","formatMoment","expandFormat","formatFunctions","replaceLongDateFormatTokens","localFormattingTokens","lastIndex","test","addRegexToken","regex","strictRegex","regexes","isStrict","getParseRegexForToken","unescapeFormat","regexEscape","matched","p1","p2","p3","p4","addParseToken","tokens","addWeekParseToken","_w","addTimeToArrayFromToken","_a","daysInMonth","year","month","UTC","getUTCDate","localeMonths","_months","isFormat","MONTHS_IN_FORMAT","localeMonthsShort","_monthsShort","units_month__handleStrictParse","monthName","ii","llc","toLocaleLowerCase","_monthsParse","_longMonthsParse","_shortMonthsParse","monthsShort","months","indexOf","localeMonthsParse","_monthsParseExact","setMonth","dayOfMonth","monthsParse","date","getSetMonth","getDaysInMonth","monthsShortRegex","computeMonthsParse","_monthsShortStrictRegex","_monthsShortRegex","defaultMonthsShortRegex","monthsRegex","_monthsStrictRegex","_monthsRegex","defaultMonthsRegex","cmpLenRev","shortPieces","longPieces","mixedPieces","daysInYear","isLeapYear","getIsLeapYear","createDate","y","d","h","M","ms","getFullYear","setFullYear","createUTCDate","getUTCFullYear","setUTCFullYear","firstWeekOffset","dow","doy","fwd","fwdlw","getUTCDay","dayOfYearFromWeeks","week","weekday","resYear","resDayOfYear","localWeekday","weekOffset","dayOfYear","weekOfYear","resWeek","weeksInYear","weekOffsetNext","localeWeek","_week","localeFirstDayOfWeek","localeFirstDayOfYear","getSetWeek","add","getSetISOWeek","parseWeekday","weekdaysParse","parseInt","parseIsoWeekday","localeWeekdays","_weekdays","day","localeWeekdaysShort","_weekdaysShort","localeWeekdaysMin","_weekdaysMin","day_of_week__handleStrictParse","weekdayName","_weekdaysParse","_shortWeekdaysParse","_minWeekdaysParse","weekdaysMin","weekdaysShort","weekdays","localeWeekdaysParse","_weekdaysParseExact","_fullWeekdaysParse","getSetDayOfWeek","getDay","getSetLocaleDayOfWeek","getSetISODayOfWeek","weekdaysRegex","computeWeekdaysParse","_weekdaysStrictRegex","_weekdaysRegex","defaultWeekdaysRegex","weekdaysShortRegex","_weekdaysShortStrictRegex","_weekdaysShortRegex","defaultWeekdaysShortRegex","weekdaysMinRegex","_weekdaysMinStrictRegex","_weekdaysMinRegex","defaultWeekdaysMinRegex","minp","shortp","longp","minPieces","hFormat","hours","kFormat","lowercase","minutes","matchMeridiem","_meridiemParse","localeIsPM","charAt","localeMeridiem","isLower","normalizeLocale","chooseLocale","names","j","next","split","loadLocale","oldLocale","locales","globalLocale","_abbr","locale_locales__getSetGlobalLocale","values","data","locale_locales__getLocale","defineLocale","baseConfig","abbr","parentLocale","updateLocale","locale_locales__listLocales","keys","checkOverflow","MONTH","DATE","YEAR","HOUR","MINUTE","SECOND","MILLISECOND","_overflowDayOfYear","_overflowWeeks","WEEK","_overflowWeekday","WEEKDAY","configFromISO","allowTime","dateFormat","timeFormat","tzFormat","extendedIsoRegex","exec","basicIsoRegex","isoDates","isoTimes","tzRegex","configFromStringAndFormat","configFromString","aspNetJsonRegex","createFromInputFallback","defaults","c","currentDateArray","nowValue","_useUTC","getUTCMonth","getMonth","getDate","configFromArray","currentDate","yearToUse","dayOfYearFromWeekInfo","_dayOfYear","_nextDay","setUTCMinutes","getUTCMinutes","w","weekYear","temp","weekdayOverflow","GG","W","E","local__createLocal","gg","ISO_8601","parsedInput","skipped","stringLength","totalParsedInputLength","_meridiem","meridiemFixWrap","hour","isPm","meridiemHour","isPM","configFromStringAndArray","tempConfig","bestMoment","scoreToBeat","currentScore","score","configFromObject","minute","second","millisecond","createFromConfig","prepareConfig","preparse","configFromInput","isUTC","pickBy","moments","args","Duration","duration","years","quarters","quarter","weeks","days","seconds","milliseconds","_milliseconds","_days","_data","_bubble","isDuration","offset","separator","utcOffset","offsetFromString","matcher","matches","chunk","parts","chunkOffset","cloneWithOffset","model","clone","setTime","local","getDateOffset","round","getTimezoneOffset","getSetOffset","keepLocalTime","localAdjust","matchShortOffset","_changeInProgress","add_subtract__addSubtract","create__createDuration","getSetZone","setOffsetToUTC","setOffsetToLocal","subtract","setOffsetToParsedOffset","matchOffset","hasAlignedHourOffset","isDaylightSavingTime","isDaylightSavingTimeShifted","_isDSTShifted","other","toArray","isLocal","isUtcOffset","isUtc","ret","diffRes","aspNetRegex","isoRegex","parseIso","momentsDifference","inp","parseFloat","positiveMomentsDifference","base","isAfter","isBefore","absRound","createAdder","direction","period","dur","tmp","isAdding","getCalendarFormat","myMoment","moment_calendar__calendar","time","formats","sod","startOf","calendarFormat","calendar","localInput","endOf","isBetween","inclusivity","isSame","inputMs","isSameOrAfter","isSameOrBefore","asFloat","that","zoneDelta","delta","monthDiff","anchor2","adjust","wholeMonthDiff","anchor","moment_format__toISOString","toISOString","toDate","inputString","defaultFormatUtc","defaultFormat","postformat","humanize","fromNow","toNow","newLocaleData","isoWeekday","to_type__valueOf","unix","toObject","toJSON","moment_valid__isValid","parsingFlags","invalidAt","creationData","addWeekYearFormatToken","getter","getSetWeekYear","getSetWeekYearHelper","getSetISOWeekYear","isoWeek","getISOWeeksInYear","getWeeksInYear","weekInfo","weeksTarget","setWeekAll","dayOfYearData","getSetQuarter","getSetDayOfYear","parseMs","getZoneAbbr","getZoneName","moment__createUnix","moment__createInZone","parseZone","preParsePostFormat","lists__get","index","field","setter","listMonthsImpl","out","listWeekdaysImpl","localeSorted","shift","lists__listMonths","lists__listMonthsShort","lists__listWeekdays","lists__listWeekdaysShort","lists__listWeekdaysMin","duration_abs__abs","mathAbs","duration_add_subtract__addSubtract","duration_add_subtract__add","duration_add_subtract__subtract","absCeil","bubble","monthsFromDays","monthsToDays","daysToMonths","as","duration_as__valueOf","makeAs","alias","duration_get__get","makeGetter","substituteTimeAgo","relativeTime","duration_humanize__relativeTime","posNegDuration","thresholds","duration_humanize__getSetRelativeTimeRounding","roundingFunction","duration_humanize__getSetRelativeTimeThreshold","threshold","limit","withSuffix","iso_string__toISOString","iso_string__abs","Y","D","total","asSeconds","fun","defaultCalendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","defaultLongDateFormat","LTS","LT","L","LL","LLL","LLLL","defaultInvalidDate","defaultOrdinal","defaultOrdinalParse","defaultRelativeTime","future","past","mm","hh","dd","MM","yy","match1","match2","match3","match4","match6","match1to2","match3to4","match5to6","match1to3","match1to4","match1to6","matchUnsigned","matchSigned","matchTimestamp","matchWord","defaultLocaleMonths","defaultLocaleMonthsShort","parseTwoDigitYear","getSetYear","defaultLocaleWeek","defaultLocaleWeekdays","defaultLocaleWeekdaysShort","defaultLocaleWeekdaysMin","_isPm","pos","pos1","pos2","defaultLocaleMeridiemParse","getSetHour","ordinalParse","meridiemParse","prototypeMin","prototypeMax","add_subtract__add","add_subtract__subtract","lang","isoWeekYear","getSetDayOfMonth","getSetMinute","getSetSecond","getSetMillisecond","momentPrototype__proto","get","isoWeeks","isoWeeksInYear","isDST","zoneAbbr","zoneName","dates","zone","isDSTShifted","momentPrototype","prototype__proto","firstDayOfYear","firstDayOfWeek","langData","asMilliseconds","asMinutes","asHours","asDays","asWeeks","asMonths","asYears","duration_prototype__proto","toIsoString","version","invalid","relativeTimeRounding","relativeTimeThreshold","_moment","2","WeatherModel","location","currentWeather","forecast","unitChange","Event","WeatherView","elements","_model","_elements","unitButtonClicked","_this","attach","convertUnits","WeatherCtrl","view","_view","convertUnit","sender","_sender","_listeners","toCelsius","num","toFahrenheit","_this2","forEach","high","low","notify","show","_this3","cc","html","city","region","displayAnimation","text","displaySymbol","init","button","$","todayWeather","highWeather","lowWeather","click","_this4","listener","Model","View","Ctrl","3","weather","document","ready","ip","url","sanitizeData","tmpDate","object","getJSON","state","query","encodeURI","setting","then","intel","results","channel","item","condition","./weather.js"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","//! moment.js\n//! version : 2.14.1\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, function () { 'use strict';\n\n    var hookCallback;\n\n    function utils_hooks__hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        return Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        var k;\n        for (k in obj) {\n            // even if its not own property I'd still call it non-empty\n            return false;\n        }\n        return true;\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function create_utc__createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function valid__isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            m._isValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                m._isValid = m._isValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n        }\n        return m._isValid;\n    }\n\n    function valid__createInvalid (flags) {\n        var m = create_utc__createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = utils_hooks__hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i in momentProperties) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            utils_hooks__hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (utils_hooks__hooks.deprecationHandler != null) {\n                utils_hooks__hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (utils_hooks__hooks.deprecationHandler != null) {\n            utils_hooks__hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    utils_hooks__hooks.suppressDeprecationWarnings = false;\n    utils_hooks__hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function locale_set__set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _ordinalParseLenient.\n        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function locale_calendar__calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relative__relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                get_set__set(this, unit, value);\n                utils_hooks__hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get_set__get(this, unit);\n            }\n        };\n    }\n\n    function get_set__get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function get_set__set (mom, unit, value) {\n        if (mom.isValid()) {\n            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (typeof callback === 'number') {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function units_month__handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = create_utc__createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return units_month__handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (typeof value !== 'number') {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            utils_hooks__hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get_set__get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    utils_hooks__hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        //can't just apply() to create a date:\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        //the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n\n        //the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return this._weekdaysShort[m.day()];\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return this._weekdaysMin[m.day()];\n    }\n\n    function day_of_week__handleStrictParse(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = create_utc__createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = create_utc__createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour he wants. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        ordinalParse: defaultOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return null;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                require('./locale/' + name);\n                // because defineLocale currently also sets the global locale, we\n                // want to undo that for lazy loaded locales\n                locale_locales__getSetGlobalLocale(oldLocale);\n            } catch (e) { }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function locale_locales__getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = locale_locales__getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    // treat as if there is no base config\n                    deprecateSimple('parentLocaleUndefined',\n                            'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            // backwards compat for now: also set the locale\n            locale_locales__getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, parentConfig = baseConfig;\n            // MERGE\n            if (locales[name] != null) {\n                parentConfig = locales[name]._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            locale_locales__getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function locale_locales__getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function locale_locales__listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n            utils_hooks__hooks.createFromInputFallback(config);\n        }\n    }\n\n    utils_hooks__hooks.createFromInputFallback = deprecate(\n        'moment construction falls back to js Date. This is ' +\n        'discouraged and will be removed in upcoming major ' +\n        'release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(utils_hooks__hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse)) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);\n            week = defaults(w.w, 1);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    utils_hooks__hooks.ISO_8601 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === utils_hooks__hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!valid__isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || locale_locales__getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return valid__createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!valid__isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (input === undefined) {\n            config._d = new Date(utils_hooks__hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (typeof(input) === 'object') {\n            configFromObject(config);\n        } else if (typeof(input) === 'number') {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            utils_hooks__hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (typeof(locale) === 'boolean') {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function local__createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = local__createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return valid__createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = local__createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return valid__createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return local__createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = locale_locales__getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = ((string || '').match(matcher) || []);\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            utils_hooks__hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return local__createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    utils_hooks__hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n            } else if (Math.abs(input) < 16) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    utils_hooks__hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm) {\n            this.utcOffset(this._tzm);\n        } else if (typeof this._i === 'string') {\n            this.utcOffset(offsetFromString(matchOffset, this._i));\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? local__createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?\\d*)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;\n\n    function create__createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (typeof input === 'number') {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])        * sign,\n                h  : toInt(match[HOUR])        * sign,\n                m  : toInt(match[MINUTE])      * sign,\n                s  : toInt(match[SECOND])      * sign,\n                ms : toInt(match[MILLISECOND]) * sign\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    create__createDuration.fn = Duration.prototype;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = create__createDuration(val, period);\n            add_subtract__addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (days) {\n            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);\n        }\n        if (months) {\n            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);\n        }\n        if (updateOffset) {\n            utils_hooks__hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add_subtract__add      = createAdder(1, 'add');\n    var add_subtract__subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function moment_calendar__calendar (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || local__createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units || 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input,units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input,units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            delta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        if (units === 'year' || units === 'month' || units === 'quarter') {\n            output = monthDiff(this, that);\n            if (units === 'quarter') {\n                output = output / 3;\n            } else if (units === 'year') {\n                output = output / 12;\n            }\n        } else {\n            delta = this - that;\n            output = units === 'second' ? delta / 1e3 : // 1000\n                units === 'minute' ? delta / 6e4 : // 1000 * 60\n                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60\n                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n                delta;\n        }\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function moment_format__toISOString () {\n        var m = this.clone().utc();\n        if (0 < m.year() && m.year() <= 9999) {\n            if (isFunction(Date.prototype.toISOString)) {\n                // native implementation is ~50x faster, use it when we can\n                return this.toDate().toISOString();\n            } else {\n                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n            }\n        } else {\n            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n        }\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 local__createLocal(time).isValid())) {\n            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(local__createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 local__createLocal(time).isValid())) {\n            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(local__createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = locale_locales__getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'quarter':\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n            case 'date':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === 'week') {\n            this.weekday(0);\n        }\n        if (units === 'isoWeek') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === 'quarter') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond') {\n            return this;\n        }\n\n        // 'date' is an alias for 'day', so it should be considered as such.\n        if (units === 'date') {\n            units = 'day';\n        }\n\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n    }\n\n    function to_type__valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function moment_valid__isValid () {\n        return valid__isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIOROITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0], 10);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var momentPrototype__proto = Moment.prototype;\n\n    momentPrototype__proto.add               = add_subtract__add;\n    momentPrototype__proto.calendar          = moment_calendar__calendar;\n    momentPrototype__proto.clone             = clone;\n    momentPrototype__proto.diff              = diff;\n    momentPrototype__proto.endOf             = endOf;\n    momentPrototype__proto.format            = format;\n    momentPrototype__proto.from              = from;\n    momentPrototype__proto.fromNow           = fromNow;\n    momentPrototype__proto.to                = to;\n    momentPrototype__proto.toNow             = toNow;\n    momentPrototype__proto.get               = stringGet;\n    momentPrototype__proto.invalidAt         = invalidAt;\n    momentPrototype__proto.isAfter           = isAfter;\n    momentPrototype__proto.isBefore          = isBefore;\n    momentPrototype__proto.isBetween         = isBetween;\n    momentPrototype__proto.isSame            = isSame;\n    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;\n    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;\n    momentPrototype__proto.isValid           = moment_valid__isValid;\n    momentPrototype__proto.lang              = lang;\n    momentPrototype__proto.locale            = locale;\n    momentPrototype__proto.localeData        = localeData;\n    momentPrototype__proto.max               = prototypeMax;\n    momentPrototype__proto.min               = prototypeMin;\n    momentPrototype__proto.parsingFlags      = parsingFlags;\n    momentPrototype__proto.set               = stringSet;\n    momentPrototype__proto.startOf           = startOf;\n    momentPrototype__proto.subtract          = add_subtract__subtract;\n    momentPrototype__proto.toArray           = toArray;\n    momentPrototype__proto.toObject          = toObject;\n    momentPrototype__proto.toDate            = toDate;\n    momentPrototype__proto.toISOString       = moment_format__toISOString;\n    momentPrototype__proto.toJSON            = toJSON;\n    momentPrototype__proto.toString          = toString;\n    momentPrototype__proto.unix              = unix;\n    momentPrototype__proto.valueOf           = to_type__valueOf;\n    momentPrototype__proto.creationData      = creationData;\n\n    // Year\n    momentPrototype__proto.year       = getSetYear;\n    momentPrototype__proto.isLeapYear = getIsLeapYear;\n\n    // Week Year\n    momentPrototype__proto.weekYear    = getSetWeekYear;\n    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;\n\n    // Quarter\n    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;\n\n    // Month\n    momentPrototype__proto.month       = getSetMonth;\n    momentPrototype__proto.daysInMonth = getDaysInMonth;\n\n    // Week\n    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;\n    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;\n    momentPrototype__proto.weeksInYear    = getWeeksInYear;\n    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;\n\n    // Day\n    momentPrototype__proto.date       = getSetDayOfMonth;\n    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;\n    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;\n    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;\n    momentPrototype__proto.dayOfYear  = getSetDayOfYear;\n\n    // Hour\n    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;\n\n    // Minute\n    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;\n\n    // Second\n    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;\n\n    // Millisecond\n    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;\n\n    // Offset\n    momentPrototype__proto.utcOffset            = getSetOffset;\n    momentPrototype__proto.utc                  = setOffsetToUTC;\n    momentPrototype__proto.local                = setOffsetToLocal;\n    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;\n    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    momentPrototype__proto.isDST                = isDaylightSavingTime;\n    momentPrototype__proto.isLocal              = isLocal;\n    momentPrototype__proto.isUtcOffset          = isUtcOffset;\n    momentPrototype__proto.isUtc                = isUtc;\n    momentPrototype__proto.isUTC                = isUtc;\n\n    // Timezone\n    momentPrototype__proto.zoneAbbr = getZoneAbbr;\n    momentPrototype__proto.zoneName = getZoneName;\n\n    // Deprecations\n    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    var momentPrototype = momentPrototype__proto;\n\n    function moment__createUnix (input) {\n        return local__createLocal(input * 1000);\n    }\n\n    function moment__createInZone () {\n        return local__createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var prototype__proto = Locale.prototype;\n\n    prototype__proto.calendar        = locale_calendar__calendar;\n    prototype__proto.longDateFormat  = longDateFormat;\n    prototype__proto.invalidDate     = invalidDate;\n    prototype__proto.ordinal         = ordinal;\n    prototype__proto.preparse        = preParsePostFormat;\n    prototype__proto.postformat      = preParsePostFormat;\n    prototype__proto.relativeTime    = relative__relativeTime;\n    prototype__proto.pastFuture      = pastFuture;\n    prototype__proto.set             = locale_set__set;\n\n    // Month\n    prototype__proto.months            =        localeMonths;\n    prototype__proto.monthsShort       =        localeMonthsShort;\n    prototype__proto.monthsParse       =        localeMonthsParse;\n    prototype__proto.monthsRegex       = monthsRegex;\n    prototype__proto.monthsShortRegex  = monthsShortRegex;\n\n    // Week\n    prototype__proto.week = localeWeek;\n    prototype__proto.firstDayOfYear = localeFirstDayOfYear;\n    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;\n\n    // Day of Week\n    prototype__proto.weekdays       =        localeWeekdays;\n    prototype__proto.weekdaysMin    =        localeWeekdaysMin;\n    prototype__proto.weekdaysShort  =        localeWeekdaysShort;\n    prototype__proto.weekdaysParse  =        localeWeekdaysParse;\n\n    prototype__proto.weekdaysRegex       =        weekdaysRegex;\n    prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;\n    prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    // Hours\n    prototype__proto.isPM = localeIsPM;\n    prototype__proto.meridiem = localeMeridiem;\n\n    function lists__get (format, index, field, setter) {\n        var locale = locale_locales__getLocale();\n        var utc = create_utc__createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (typeof format === 'number') {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return lists__get(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = lists__get(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = locale_locales__getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return lists__get(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = lists__get(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function lists__listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function lists__listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function lists__listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function lists__listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function lists__listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    locale_locales__getSetGlobalLocale('en', {\n        ordinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);\n    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);\n\n    var mathAbs = Math.abs;\n\n    function duration_abs__abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function duration_add_subtract__addSubtract (duration, input, value, direction) {\n        var other = create__createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function duration_add_subtract__add (input, value) {\n        return duration_add_subtract__addSubtract(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function duration_add_subtract__subtract (input, value) {\n        return duration_add_subtract__addSubtract(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'year') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function duration_as__valueOf () {\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asYears        = makeAs('y');\n\n    function duration_get__get (units) {\n        units = normalizeUnits(units);\n        return this[units + 's']();\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this._data[name];\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        s: 45,  // seconds to minute\n        m: 45,  // minutes to hour\n        h: 22,  // hours to day\n        d: 26,  // days to month\n        M: 11   // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {\n        var duration = create__createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds < thresholds.s && ['s', seconds]  ||\n                minutes <= 1           && ['m']           ||\n                minutes < thresholds.m && ['mm', minutes] ||\n                hours   <= 1           && ['h']           ||\n                hours   < thresholds.h && ['hh', hours]   ||\n                days    <= 1           && ['d']           ||\n                days    < thresholds.d && ['dd', days]    ||\n                months  <= 1           && ['M']           ||\n                months  < thresholds.M && ['MM', months]  ||\n                years   <= 1           && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        var locale = this.localeData();\n        var output = duration_humanize__relativeTime(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var iso_string__abs = Math.abs;\n\n    function iso_string__toISOString() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        var seconds = iso_string__abs(this._milliseconds) / 1000;\n        var days         = iso_string__abs(this._days);\n        var months       = iso_string__abs(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds;\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        return (total < 0 ? '-' : '') +\n            'P' +\n            (Y ? Y + 'Y' : '') +\n            (M ? M + 'M' : '') +\n            (D ? D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? h + 'H' : '') +\n            (m ? m + 'M' : '') +\n            (s ? s + 'S' : '');\n    }\n\n    var duration_prototype__proto = Duration.prototype;\n\n    duration_prototype__proto.abs            = duration_abs__abs;\n    duration_prototype__proto.add            = duration_add_subtract__add;\n    duration_prototype__proto.subtract       = duration_add_subtract__subtract;\n    duration_prototype__proto.as             = as;\n    duration_prototype__proto.asMilliseconds = asMilliseconds;\n    duration_prototype__proto.asSeconds      = asSeconds;\n    duration_prototype__proto.asMinutes      = asMinutes;\n    duration_prototype__proto.asHours        = asHours;\n    duration_prototype__proto.asDays         = asDays;\n    duration_prototype__proto.asWeeks        = asWeeks;\n    duration_prototype__proto.asMonths       = asMonths;\n    duration_prototype__proto.asYears        = asYears;\n    duration_prototype__proto.valueOf        = duration_as__valueOf;\n    duration_prototype__proto._bubble        = bubble;\n    duration_prototype__proto.get            = duration_get__get;\n    duration_prototype__proto.milliseconds   = milliseconds;\n    duration_prototype__proto.seconds        = seconds;\n    duration_prototype__proto.minutes        = minutes;\n    duration_prototype__proto.hours          = hours;\n    duration_prototype__proto.days           = days;\n    duration_prototype__proto.weeks          = weeks;\n    duration_prototype__proto.months         = months;\n    duration_prototype__proto.years          = years;\n    duration_prototype__proto.humanize       = humanize;\n    duration_prototype__proto.toISOString    = iso_string__toISOString;\n    duration_prototype__proto.toString       = iso_string__toISOString;\n    duration_prototype__proto.toJSON         = iso_string__toISOString;\n    duration_prototype__proto.locale         = locale;\n    duration_prototype__proto.localeData     = localeData;\n\n    // Deprecations\n    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);\n    duration_prototype__proto.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    utils_hooks__hooks.version = '2.14.1';\n\n    setHookCallback(local__createLocal);\n\n    utils_hooks__hooks.fn                    = momentPrototype;\n    utils_hooks__hooks.min                   = min;\n    utils_hooks__hooks.max                   = max;\n    utils_hooks__hooks.now                   = now;\n    utils_hooks__hooks.utc                   = create_utc__createUTC;\n    utils_hooks__hooks.unix                  = moment__createUnix;\n    utils_hooks__hooks.months                = lists__listMonths;\n    utils_hooks__hooks.isDate                = isDate;\n    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;\n    utils_hooks__hooks.invalid               = valid__createInvalid;\n    utils_hooks__hooks.duration              = create__createDuration;\n    utils_hooks__hooks.isMoment              = isMoment;\n    utils_hooks__hooks.weekdays              = lists__listWeekdays;\n    utils_hooks__hooks.parseZone             = moment__createInZone;\n    utils_hooks__hooks.localeData            = locale_locales__getLocale;\n    utils_hooks__hooks.isDuration            = isDuration;\n    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;\n    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;\n    utils_hooks__hooks.defineLocale          = defineLocale;\n    utils_hooks__hooks.updateLocale          = updateLocale;\n    utils_hooks__hooks.locales               = locale_locales__listLocales;\n    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;\n    utils_hooks__hooks.normalizeUnits        = normalizeUnits;\n    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;\n    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;\n    utils_hooks__hooks.calendarFormat        = getCalendarFormat;\n    utils_hooks__hooks.prototype             = momentPrototype;\n\n    var _moment = utils_hooks__hooks;\n\n    return _moment;\n\n}));","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n//! moment.js\n//! version : 2.14.1\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, function () { 'use strict';\n\n    var hookCallback;\n\n    function utils_hooks__hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        return Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        var k;\n        for (k in obj) {\n            // even if its not own property I'd still call it non-empty\n            return false;\n        }\n        return true;\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function create_utc__createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function valid__isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            m._isValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                m._isValid = m._isValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n        }\n        return m._isValid;\n    }\n\n    function valid__createInvalid (flags) {\n        var m = create_utc__createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = utils_hooks__hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i in momentProperties) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            utils_hooks__hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (utils_hooks__hooks.deprecationHandler != null) {\n                utils_hooks__hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (utils_hooks__hooks.deprecationHandler != null) {\n            utils_hooks__hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    utils_hooks__hooks.suppressDeprecationWarnings = false;\n    utils_hooks__hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function locale_set__set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _ordinalParseLenient.\n        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function locale_calendar__calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relative__relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                get_set__set(this, unit, value);\n                utils_hooks__hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get_set__get(this, unit);\n            }\n        };\n    }\n\n    function get_set__get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function get_set__set (mom, unit, value) {\n        if (mom.isValid()) {\n            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (typeof callback === 'number') {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function units_month__handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = create_utc__createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return units_month__handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (typeof value !== 'number') {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            utils_hooks__hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get_set__get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    utils_hooks__hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        //can't just apply() to create a date:\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        //the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n\n        //the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return this._weekdaysShort[m.day()];\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return this._weekdaysMin[m.day()];\n    }\n\n    function day_of_week__handleStrictParse(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = create_utc__createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = create_utc__createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour he wants. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        ordinalParse: defaultOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return null;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                require('./locale/' + name);\n                // because defineLocale currently also sets the global locale, we\n                // want to undo that for lazy loaded locales\n                locale_locales__getSetGlobalLocale(oldLocale);\n            } catch (e) { }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function locale_locales__getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = locale_locales__getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    // treat as if there is no base config\n                    deprecateSimple('parentLocaleUndefined',\n                            'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            // backwards compat for now: also set the locale\n            locale_locales__getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, parentConfig = baseConfig;\n            // MERGE\n            if (locales[name] != null) {\n                parentConfig = locales[name]._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            locale_locales__getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function locale_locales__getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function locale_locales__listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n            utils_hooks__hooks.createFromInputFallback(config);\n        }\n    }\n\n    utils_hooks__hooks.createFromInputFallback = deprecate(\n        'moment construction falls back to js Date. This is ' +\n        'discouraged and will be removed in upcoming major ' +\n        'release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(utils_hooks__hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse)) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);\n            week = defaults(w.w, 1);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    utils_hooks__hooks.ISO_8601 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === utils_hooks__hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!valid__isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || locale_locales__getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return valid__createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!valid__isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (input === undefined) {\n            config._d = new Date(utils_hooks__hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (typeof(input) === 'object') {\n            configFromObject(config);\n        } else if (typeof(input) === 'number') {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            utils_hooks__hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (typeof(locale) === 'boolean') {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function local__createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = local__createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return valid__createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = local__createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return valid__createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return local__createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = locale_locales__getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = ((string || '').match(matcher) || []);\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            utils_hooks__hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return local__createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    utils_hooks__hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n            } else if (Math.abs(input) < 16) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    utils_hooks__hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm) {\n            this.utcOffset(this._tzm);\n        } else if (typeof this._i === 'string') {\n            this.utcOffset(offsetFromString(matchOffset, this._i));\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? local__createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?\\d*)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;\n\n    function create__createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (typeof input === 'number') {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])        * sign,\n                h  : toInt(match[HOUR])        * sign,\n                m  : toInt(match[MINUTE])      * sign,\n                s  : toInt(match[SECOND])      * sign,\n                ms : toInt(match[MILLISECOND]) * sign\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    create__createDuration.fn = Duration.prototype;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = create__createDuration(val, period);\n            add_subtract__addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (days) {\n            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);\n        }\n        if (months) {\n            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);\n        }\n        if (updateOffset) {\n            utils_hooks__hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add_subtract__add      = createAdder(1, 'add');\n    var add_subtract__subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function moment_calendar__calendar (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || local__createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units || 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input,units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input,units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            delta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        if (units === 'year' || units === 'month' || units === 'quarter') {\n            output = monthDiff(this, that);\n            if (units === 'quarter') {\n                output = output / 3;\n            } else if (units === 'year') {\n                output = output / 12;\n            }\n        } else {\n            delta = this - that;\n            output = units === 'second' ? delta / 1e3 : // 1000\n                units === 'minute' ? delta / 6e4 : // 1000 * 60\n                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60\n                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n                delta;\n        }\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function moment_format__toISOString () {\n        var m = this.clone().utc();\n        if (0 < m.year() && m.year() <= 9999) {\n            if (isFunction(Date.prototype.toISOString)) {\n                // native implementation is ~50x faster, use it when we can\n                return this.toDate().toISOString();\n            } else {\n                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n            }\n        } else {\n            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n        }\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 local__createLocal(time).isValid())) {\n            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(local__createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 local__createLocal(time).isValid())) {\n            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(local__createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = locale_locales__getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'quarter':\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n            case 'date':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === 'week') {\n            this.weekday(0);\n        }\n        if (units === 'isoWeek') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === 'quarter') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond') {\n            return this;\n        }\n\n        // 'date' is an alias for 'day', so it should be considered as such.\n        if (units === 'date') {\n            units = 'day';\n        }\n\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n    }\n\n    function to_type__valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function moment_valid__isValid () {\n        return valid__isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIOROITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0], 10);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var momentPrototype__proto = Moment.prototype;\n\n    momentPrototype__proto.add               = add_subtract__add;\n    momentPrototype__proto.calendar          = moment_calendar__calendar;\n    momentPrototype__proto.clone             = clone;\n    momentPrototype__proto.diff              = diff;\n    momentPrototype__proto.endOf             = endOf;\n    momentPrototype__proto.format            = format;\n    momentPrototype__proto.from              = from;\n    momentPrototype__proto.fromNow           = fromNow;\n    momentPrototype__proto.to                = to;\n    momentPrototype__proto.toNow             = toNow;\n    momentPrototype__proto.get               = stringGet;\n    momentPrototype__proto.invalidAt         = invalidAt;\n    momentPrototype__proto.isAfter           = isAfter;\n    momentPrototype__proto.isBefore          = isBefore;\n    momentPrototype__proto.isBetween         = isBetween;\n    momentPrototype__proto.isSame            = isSame;\n    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;\n    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;\n    momentPrototype__proto.isValid           = moment_valid__isValid;\n    momentPrototype__proto.lang              = lang;\n    momentPrototype__proto.locale            = locale;\n    momentPrototype__proto.localeData        = localeData;\n    momentPrototype__proto.max               = prototypeMax;\n    momentPrototype__proto.min               = prototypeMin;\n    momentPrototype__proto.parsingFlags      = parsingFlags;\n    momentPrototype__proto.set               = stringSet;\n    momentPrototype__proto.startOf           = startOf;\n    momentPrototype__proto.subtract          = add_subtract__subtract;\n    momentPrototype__proto.toArray           = toArray;\n    momentPrototype__proto.toObject          = toObject;\n    momentPrototype__proto.toDate            = toDate;\n    momentPrototype__proto.toISOString       = moment_format__toISOString;\n    momentPrototype__proto.toJSON            = toJSON;\n    momentPrototype__proto.toString          = toString;\n    momentPrototype__proto.unix              = unix;\n    momentPrototype__proto.valueOf           = to_type__valueOf;\n    momentPrototype__proto.creationData      = creationData;\n\n    // Year\n    momentPrototype__proto.year       = getSetYear;\n    momentPrototype__proto.isLeapYear = getIsLeapYear;\n\n    // Week Year\n    momentPrototype__proto.weekYear    = getSetWeekYear;\n    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;\n\n    // Quarter\n    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;\n\n    // Month\n    momentPrototype__proto.month       = getSetMonth;\n    momentPrototype__proto.daysInMonth = getDaysInMonth;\n\n    // Week\n    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;\n    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;\n    momentPrototype__proto.weeksInYear    = getWeeksInYear;\n    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;\n\n    // Day\n    momentPrototype__proto.date       = getSetDayOfMonth;\n    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;\n    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;\n    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;\n    momentPrototype__proto.dayOfYear  = getSetDayOfYear;\n\n    // Hour\n    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;\n\n    // Minute\n    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;\n\n    // Second\n    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;\n\n    // Millisecond\n    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;\n\n    // Offset\n    momentPrototype__proto.utcOffset            = getSetOffset;\n    momentPrototype__proto.utc                  = setOffsetToUTC;\n    momentPrototype__proto.local                = setOffsetToLocal;\n    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;\n    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    momentPrototype__proto.isDST                = isDaylightSavingTime;\n    momentPrototype__proto.isLocal              = isLocal;\n    momentPrototype__proto.isUtcOffset          = isUtcOffset;\n    momentPrototype__proto.isUtc                = isUtc;\n    momentPrototype__proto.isUTC                = isUtc;\n\n    // Timezone\n    momentPrototype__proto.zoneAbbr = getZoneAbbr;\n    momentPrototype__proto.zoneName = getZoneName;\n\n    // Deprecations\n    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    var momentPrototype = momentPrototype__proto;\n\n    function moment__createUnix (input) {\n        return local__createLocal(input * 1000);\n    }\n\n    function moment__createInZone () {\n        return local__createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var prototype__proto = Locale.prototype;\n\n    prototype__proto.calendar        = locale_calendar__calendar;\n    prototype__proto.longDateFormat  = longDateFormat;\n    prototype__proto.invalidDate     = invalidDate;\n    prototype__proto.ordinal         = ordinal;\n    prototype__proto.preparse        = preParsePostFormat;\n    prototype__proto.postformat      = preParsePostFormat;\n    prototype__proto.relativeTime    = relative__relativeTime;\n    prototype__proto.pastFuture      = pastFuture;\n    prototype__proto.set             = locale_set__set;\n\n    // Month\n    prototype__proto.months            =        localeMonths;\n    prototype__proto.monthsShort       =        localeMonthsShort;\n    prototype__proto.monthsParse       =        localeMonthsParse;\n    prototype__proto.monthsRegex       = monthsRegex;\n    prototype__proto.monthsShortRegex  = monthsShortRegex;\n\n    // Week\n    prototype__proto.week = localeWeek;\n    prototype__proto.firstDayOfYear = localeFirstDayOfYear;\n    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;\n\n    // Day of Week\n    prototype__proto.weekdays       =        localeWeekdays;\n    prototype__proto.weekdaysMin    =        localeWeekdaysMin;\n    prototype__proto.weekdaysShort  =        localeWeekdaysShort;\n    prototype__proto.weekdaysParse  =        localeWeekdaysParse;\n\n    prototype__proto.weekdaysRegex       =        weekdaysRegex;\n    prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;\n    prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    // Hours\n    prototype__proto.isPM = localeIsPM;\n    prototype__proto.meridiem = localeMeridiem;\n\n    function lists__get (format, index, field, setter) {\n        var locale = locale_locales__getLocale();\n        var utc = create_utc__createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (typeof format === 'number') {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return lists__get(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = lists__get(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = locale_locales__getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return lists__get(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = lists__get(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function lists__listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function lists__listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function lists__listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function lists__listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function lists__listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    locale_locales__getSetGlobalLocale('en', {\n        ordinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);\n    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);\n\n    var mathAbs = Math.abs;\n\n    function duration_abs__abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function duration_add_subtract__addSubtract (duration, input, value, direction) {\n        var other = create__createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function duration_add_subtract__add (input, value) {\n        return duration_add_subtract__addSubtract(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function duration_add_subtract__subtract (input, value) {\n        return duration_add_subtract__addSubtract(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'year') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function duration_as__valueOf () {\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asYears        = makeAs('y');\n\n    function duration_get__get (units) {\n        units = normalizeUnits(units);\n        return this[units + 's']();\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this._data[name];\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        s: 45,  // seconds to minute\n        m: 45,  // minutes to hour\n        h: 22,  // hours to day\n        d: 26,  // days to month\n        M: 11   // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {\n        var duration = create__createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds < thresholds.s && ['s', seconds]  ||\n                minutes <= 1           && ['m']           ||\n                minutes < thresholds.m && ['mm', minutes] ||\n                hours   <= 1           && ['h']           ||\n                hours   < thresholds.h && ['hh', hours]   ||\n                days    <= 1           && ['d']           ||\n                days    < thresholds.d && ['dd', days]    ||\n                months  <= 1           && ['M']           ||\n                months  < thresholds.M && ['MM', months]  ||\n                years   <= 1           && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        var locale = this.localeData();\n        var output = duration_humanize__relativeTime(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var iso_string__abs = Math.abs;\n\n    function iso_string__toISOString() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        var seconds = iso_string__abs(this._milliseconds) / 1000;\n        var days         = iso_string__abs(this._days);\n        var months       = iso_string__abs(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds;\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        return (total < 0 ? '-' : '') +\n            'P' +\n            (Y ? Y + 'Y' : '') +\n            (M ? M + 'M' : '') +\n            (D ? D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? h + 'H' : '') +\n            (m ? m + 'M' : '') +\n            (s ? s + 'S' : '');\n    }\n\n    var duration_prototype__proto = Duration.prototype;\n\n    duration_prototype__proto.abs            = duration_abs__abs;\n    duration_prototype__proto.add            = duration_add_subtract__add;\n    duration_prototype__proto.subtract       = duration_add_subtract__subtract;\n    duration_prototype__proto.as             = as;\n    duration_prototype__proto.asMilliseconds = asMilliseconds;\n    duration_prototype__proto.asSeconds      = asSeconds;\n    duration_prototype__proto.asMinutes      = asMinutes;\n    duration_prototype__proto.asHours        = asHours;\n    duration_prototype__proto.asDays         = asDays;\n    duration_prototype__proto.asWeeks        = asWeeks;\n    duration_prototype__proto.asMonths       = asMonths;\n    duration_prototype__proto.asYears        = asYears;\n    duration_prototype__proto.valueOf        = duration_as__valueOf;\n    duration_prototype__proto._bubble        = bubble;\n    duration_prototype__proto.get            = duration_get__get;\n    duration_prototype__proto.milliseconds   = milliseconds;\n    duration_prototype__proto.seconds        = seconds;\n    duration_prototype__proto.minutes        = minutes;\n    duration_prototype__proto.hours          = hours;\n    duration_prototype__proto.days           = days;\n    duration_prototype__proto.weeks          = weeks;\n    duration_prototype__proto.months         = months;\n    duration_prototype__proto.years          = years;\n    duration_prototype__proto.humanize       = humanize;\n    duration_prototype__proto.toISOString    = iso_string__toISOString;\n    duration_prototype__proto.toString       = iso_string__toISOString;\n    duration_prototype__proto.toJSON         = iso_string__toISOString;\n    duration_prototype__proto.locale         = locale;\n    duration_prototype__proto.localeData     = localeData;\n\n    // Deprecations\n    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);\n    duration_prototype__proto.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    utils_hooks__hooks.version = '2.14.1';\n\n    setHookCallback(local__createLocal);\n\n    utils_hooks__hooks.fn                    = momentPrototype;\n    utils_hooks__hooks.min                   = min;\n    utils_hooks__hooks.max                   = max;\n    utils_hooks__hooks.now                   = now;\n    utils_hooks__hooks.utc                   = create_utc__createUTC;\n    utils_hooks__hooks.unix                  = moment__createUnix;\n    utils_hooks__hooks.months                = lists__listMonths;\n    utils_hooks__hooks.isDate                = isDate;\n    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;\n    utils_hooks__hooks.invalid               = valid__createInvalid;\n    utils_hooks__hooks.duration              = create__createDuration;\n    utils_hooks__hooks.isMoment              = isMoment;\n    utils_hooks__hooks.weekdays              = lists__listWeekdays;\n    utils_hooks__hooks.parseZone             = moment__createInZone;\n    utils_hooks__hooks.localeData            = locale_locales__getLocale;\n    utils_hooks__hooks.isDuration            = isDuration;\n    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;\n    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;\n    utils_hooks__hooks.defineLocale          = defineLocale;\n    utils_hooks__hooks.updateLocale          = updateLocale;\n    utils_hooks__hooks.locales               = locale_locales__listLocales;\n    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;\n    utils_hooks__hooks.normalizeUnits        = normalizeUnits;\n    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;\n    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;\n    utils_hooks__hooks.calendarFormat        = getCalendarFormat;\n    utils_hooks__hooks.prototype             = momentPrototype;\n\n    var _moment = utils_hooks__hooks;\n\n    return _moment;\n\n}));\n},{}],2:[function(require,module,exports){\n/**\n * The Model. Model stores items and notifies\n * observers about changes.\n */\nfunction WeatherModel(data) {\n  this.location = data.location\n  this.currentWeather = data.currentWeather\n  this.forecast = data.forecast\n  this.unit = 'F'\n\n  this.unitChange = new Event(this)\n}\n\nWeatherModel.prototype = {\n  toCelsius: function (num) {\n    return Math.round((num - 32) * 5 / 9)\n  },\n  toFahrenheit: function (num) {\n    return Math.round((num * 9 / 5) + 32)\n  },\n  convertUnit: function () {\n    if (this.unit === 'F') {\n      this.currentWeather.temp = this.toCelsius(this.currentWeather.temp)\n      this.forecast.forEach((day) => {\n        day.high = this.toCelsius(day.high)\n        day.low = this.toCelsius(day.low)\n      })\n      this.unit = 'C'\n      this.unitChange.notify()\n    } else {\n      this.currentWeather.temp = this.toFahrenheit(this.currentWeather.temp)\n      this.forecast.forEach((day) => {\n        day.high = this.toFahrenheit(day.high)\n        day.low = this.toFahrenheit(day.low)\n      })\n      this.unit = 'F'\n      this.unitChange.notify()\n    }\n  }\n}\n\n/**\n * The View. View presents the model and provides\n * the UI events. The controller is attached to these\n * events to handle the user interraction.\n */\nfunction WeatherView(model, elements) {\n  this._model = model\n  this._elements = elements\n\n  this.unitButtonClicked = new Event(this)\n\n  var _this = this\n\n  // attach model listeners\n  this._model.unitChange.attach(() => {\n    _this.convertUnits()\n  })\n}\n\nWeatherView.prototype = {\n  show: function () {\n    let location = this._elements.location,\n      cc = this._elements.currentWeather,\n      forecast = this._elements.forecast,\n      model = this._model\n\n    location.html(model.location.city + ', ' + model.location.region)\n\n    cc.html(\n      '<h3>' + model.currentWeather.date + '</h3>' +\n      '<h2><span id=\"todayWeather\">' + model.currentWeather.temp + '</span>&deg;<button id=\"button\" class=\"unit btn btn-primary\">F</button></h2>' +\n      this.displayAnimation(model.currentWeather.text) +\n      '<h3>' + model.currentWeather.text + '</h3>'\n\n    )\n\n    forecast.html((index) => {\n      return '<td>' + model.forecast[index].day + '</td>' +\n        '<td>' + model.forecast[index].date + '</td>' +\n        '<td><span class=\"hweather\">' + model.forecast[index].high + '</span>&deg;<span class=\"unit\">F</span></td>' +\n        '<td><span class=\"lweather\">' + model.forecast[index].low + '</span>&deg;<span class=\"unit\">F</span></td>' +\n        '<td>' + this.displaySymbol(model.forecast[index].text) + ' ' + model.forecast[index].text + '</td>'\n    })\n    return this\n\n  },\n  init: function () {\n    this._elements.button = $('#button')\n    this._elements.unit = $('.unit')\n    this._elements.todayWeather = $('#todayWeather')\n    this._elements.highWeather = $('.hweather')\n    this._elements.lowWeather = $('.lweather')\n\n    // attach listeners to HTML controls\n    var _this = this\n    this._elements.button.click(() => {\n      _this.unitButtonClicked.notify()\n    })\n  },\n  convertUnits: function () {\n    this._elements.unit.text(this._model.unit)\n\n    this._elements.todayWeather.text(this._model.currentWeather.temp)\n\n    this._elements.highWeather.text((index) => {\n      return this._model.forecast[index].high\n    })\n    this._elements.lowWeather.text((index) => {\n      return this._model.forecast[index].low\n    })\n  },\n  displaySymbol: function (string) {\n    if (/sunny/gi.test(string)) {\n      return '<i class=\"wi wi-day-sunny\"></i>'\n    } else if (/cloudy/gi.test(string)) {\n      return '<i class=\"wi wi-cloudy\"></i>'\n    } else if (/thunderstorm/gi.test(string)) {\n      return '<i class=\"wi wi-thunderstorm\"></i>'\n    }\n  },\n  displayAnimation: function (string) {\n    if (/sunny/gi.test(string)) {\n      return '<div class=\"icon sunny\"><div class=\"sun\"><div class=\"rays\"></div></div></div>'\n    } else if (/cloudy/gi.test(string)) {\n      return '<div class=\"icon cloudy\"><div class=\"cloud\"></div><div class=\"cloud\"></div></div>'\n    } else if (/thunderstorm/gi.test(string)) {\n      return '<div class=\"icon thunder-storm\"><div class=\"cloud\"></div><div class=\"lightning\"><div class=\"bolt\"></div><div class=\"bolt\"></div></div></div>'\n    } else if (/snow/gi.test(string)) {\n      return '<div class=\"icon flurries\"><div class=\"cloud\"></div><div class=\"snow\"><div class=\"flake\"></div><div class=\"flake\"></div></div></div>'\n    } else if (/shower/gi.test(string)){\n      return '<div class=\"icon rainy\"><div class=\"cloud\"></div><div class=\"rain\"></div></div>'\n    }\n  }\n}\n\n/**\n * The Controller. Controller responds to user actions and\n * invokes changes on the model.\n */\nfunction WeatherCtrl(model, view) {\n  this._model = model\n  this._view = view\n\n  var _this = this\n\n  this._view.unitButtonClicked.attach(() => {\n    _this.convertUnit()\n  })\n}\n\nWeatherCtrl.prototype = {\n  convertUnit: function () {\n    this._model.convertUnit()\n  }\n}\n\nfunction Event(sender) {\n  this._sender = sender\n  this._listeners = []\n}\n\nEvent.prototype = {\n  attach: function (listener) {\n    this._listeners.push(listener)\n  },\n  notify: function (args) {\n    for (let i = 0; i < this._listeners.length; i++) {\n      this._listeners[i](this._sender, args)\n    }\n  }\n}\n\nmodule.exports = {\n  Model: WeatherModel,\n  View: WeatherView,\n  Ctrl: WeatherCtrl\n}\n},{}],3:[function(require,module,exports){\nvar weather = require('./weather.js'), moment = require('moment')\n\n$(document).ready(() => {\n\n  let ip = {\n    url: 'https://api.ipify.org',\n    format: '?format=json'\n  }\n\n  // retrieve ip address\n  $.get(ip.url + ip.format, (data) => {\n    let location = {\n      url: 'https://freegeoip.net/',\n      format: 'json/',\n      ip: data.ip\n    }\n\n    // get location of ip address\n    $.getJSON(location.url + location.format + location.ip, (data) => {\n      let city = data['city'], state = data['region_code']\n      if (/the/gi.test(city)) {\n        city = city.split(' ')[1]\n      }\n\n      // get weather info from yahooapis\n      let w = {\n        url: 'http://query.yahooapis.com/v1/public/yql?q=',\n        query: encodeURI('select * from weather.forecast where woeid in (select woeid from geo.places(1) where text=\"' + city + ', ' + state + '\")'),\n        setting: '&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys'\n      }\n\n      $.getJSON(w.url + w.query + w.setting).then((data) => {\n\n        var intel = {\n          location: data.query.results.channel.location,\n          currentWeather: data.query.results.channel.item.condition,\n          forecast: data.query.results.channel.item.forecast\n        }\n\n        sanitizeData(intel)\n\n        var model = new weather.Model(intel)\n\n        var view = new weather.View(model, {\n          location: $('#location'),\n          currentWeather: $('#today'),\n          forecast: $('.day')\n        })\n\n        var controller = new weather.Ctrl(model, view)\n\n        view.show().init()\n      })\n    })\n    function sanitizeData(data) {\n      let tmpDate = moment.utc(new Date(data.currentWeather.date).toISOString())\n\n      data.currentWeather.date = tmpDate.format('ddd, MMM Do YYYY h:mm A')\n\n      data.currentWeather.temp = parseInt(data.currentWeather.temp)\n\n      data.forecast.forEach((object) => {\n        object.date = moment.utc(new Date(object.date).toISOString())\n        object.date = moment(object.date).format('DD MMM')\n        object.high = parseInt(object.high)\n        object.low = parseInt(object.low)\n      })\n    }\n  })\n})\n},{\"./weather.js\":2,\"moment\":1}]},{},[3])\n\n","/**\n * The Model. Model stores items and notifies\n * observers about changes.\n */\nfunction WeatherModel(data) {\n  this.location = data.location\n  this.currentWeather = data.currentWeather\n  this.forecast = data.forecast\n  this.unit = 'F'\n\n  this.unitChange = new Event(this)\n}\n\nWeatherModel.prototype = {\n  toCelsius: function (num) {\n    return Math.round((num - 32) * 5 / 9)\n  },\n  toFahrenheit: function (num) {\n    return Math.round((num * 9 / 5) + 32)\n  },\n  convertUnit: function () {\n    if (this.unit === 'F') {\n      this.currentWeather.temp = this.toCelsius(this.currentWeather.temp)\n      this.forecast.forEach((day) => {\n        day.high = this.toCelsius(day.high)\n        day.low = this.toCelsius(day.low)\n      })\n      this.unit = 'C'\n      this.unitChange.notify()\n    } else {\n      this.currentWeather.temp = this.toFahrenheit(this.currentWeather.temp)\n      this.forecast.forEach((day) => {\n        day.high = this.toFahrenheit(day.high)\n        day.low = this.toFahrenheit(day.low)\n      })\n      this.unit = 'F'\n      this.unitChange.notify()\n    }\n  }\n}\n\n/**\n * The View. View presents the model and provides\n * the UI events. The controller is attached to these\n * events to handle the user interraction.\n */\nfunction WeatherView(model, elements) {\n  this._model = model\n  this._elements = elements\n\n  this.unitButtonClicked = new Event(this)\n\n  var _this = this\n\n  // attach model listeners\n  this._model.unitChange.attach(() => {\n    _this.convertUnits()\n  })\n}\n\nWeatherView.prototype = {\n  show: function () {\n    let location = this._elements.location,\n      cc = this._elements.currentWeather,\n      forecast = this._elements.forecast,\n      model = this._model\n\n    location.html(model.location.city + ', ' + model.location.region)\n\n    cc.html(\n      '<h3>' + model.currentWeather.date + '</h3>' +\n      '<h2><span id=\"todayWeather\">' + model.currentWeather.temp + '</span>&deg;<button id=\"button\" class=\"unit btn btn-primary\">F</button></h2>' +\n      this.displayAnimation(model.currentWeather.text) +\n      '<h3>' + model.currentWeather.text + '</h3>'\n\n    )\n\n    forecast.html((index) => {\n      return '<td>' + model.forecast[index].day + '</td>' +\n        '<td>' + model.forecast[index].date + '</td>' +\n        '<td><span class=\"hweather\">' + model.forecast[index].high + '</span>&deg;<span class=\"unit\">F</span></td>' +\n        '<td><span class=\"lweather\">' + model.forecast[index].low + '</span>&deg;<span class=\"unit\">F</span></td>' +\n        '<td>' + this.displaySymbol(model.forecast[index].text) + ' ' + model.forecast[index].text + '</td>'\n    })\n    return this\n\n  },\n  init: function () {\n    this._elements.button = $('#button')\n    this._elements.unit = $('.unit')\n    this._elements.todayWeather = $('#todayWeather')\n    this._elements.highWeather = $('.hweather')\n    this._elements.lowWeather = $('.lweather')\n\n    // attach listeners to HTML controls\n    var _this = this\n    this._elements.button.click(() => {\n      _this.unitButtonClicked.notify()\n    })\n  },\n  convertUnits: function () {\n    this._elements.unit.text(this._model.unit)\n\n    this._elements.todayWeather.text(this._model.currentWeather.temp)\n\n    this._elements.highWeather.text((index) => {\n      return this._model.forecast[index].high\n    })\n    this._elements.lowWeather.text((index) => {\n      return this._model.forecast[index].low\n    })\n  },\n  displaySymbol: function (string) {\n    if (/sunny/gi.test(string)) {\n      return '<i class=\"wi wi-day-sunny\"></i>'\n    } else if (/cloudy/gi.test(string)) {\n      return '<i class=\"wi wi-cloudy\"></i>'\n    } else if (/thunderstorm/gi.test(string)) {\n      return '<i class=\"wi wi-thunderstorm\"></i>'\n    }\n  },\n  displayAnimation: function (string) {\n    if (/sunny/gi.test(string)) {\n      return '<div class=\"icon sunny\"><div class=\"sun\"><div class=\"rays\"></div></div></div>'\n    } else if (/cloudy/gi.test(string)) {\n      return '<div class=\"icon cloudy\"><div class=\"cloud\"></div><div class=\"cloud\"></div></div>'\n    } else if (/thunderstorm/gi.test(string)) {\n      return '<div class=\"icon thunder-storm\"><div class=\"cloud\"></div><div class=\"lightning\"><div class=\"bolt\"></div><div class=\"bolt\"></div></div></div>'\n    } else if (/snow/gi.test(string)) {\n      return '<div class=\"icon flurries\"><div class=\"cloud\"></div><div class=\"snow\"><div class=\"flake\"></div><div class=\"flake\"></div></div></div>'\n    } else if (/shower/gi.test(string)){\n      return '<div class=\"icon rainy\"><div class=\"cloud\"></div><div class=\"rain\"></div></div>'\n    }\n  }\n}\n\n/**\n * The Controller. Controller responds to user actions and\n * invokes changes on the model.\n */\nfunction WeatherCtrl(model, view) {\n  this._model = model\n  this._view = view\n\n  var _this = this\n\n  this._view.unitButtonClicked.attach(() => {\n    _this.convertUnit()\n  })\n}\n\nWeatherCtrl.prototype = {\n  convertUnit: function () {\n    this._model.convertUnit()\n  }\n}\n\nfunction Event(sender) {\n  this._sender = sender\n  this._listeners = []\n}\n\nEvent.prototype = {\n  attach: function (listener) {\n    this._listeners.push(listener)\n  },\n  notify: function (args) {\n    for (let i = 0; i < this._listeners.length; i++) {\n      this._listeners[i](this._sender, args)\n    }\n  }\n}\n\nmodule.exports = {\n  Model: WeatherModel,\n  View: WeatherView,\n  Ctrl: WeatherCtrl\n}","var weather = require('./weather.js'), moment = require('moment')\n\n$(document).ready(() => {\n\n  let ip = {\n    url: 'https://api.ipify.org',\n    format: '?format=json'\n  }\n\n  // retrieve ip address\n  $.get(ip.url + ip.format, (data) => {\n    let location = {\n      url: 'https://freegeoip.net/',\n      format: 'json/',\n      ip: data.ip\n    }\n\n    // get location of ip address\n    $.getJSON(location.url + location.format + location.ip, (data) => {\n      let city = data['city'], state = data['region_code']\n      if (/the/gi.test(city)) {\n        city = city.split(' ')[1]\n      }\n\n      // get weather info from yahooapis\n      let w = {\n        url: 'http://query.yahooapis.com/v1/public/yql?q=',\n        query: encodeURI('select * from weather.forecast where woeid in (select woeid from geo.places(1) where text=\"' + city + ', ' + state + '\")'),\n        setting: '&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys'\n      }\n\n      $.getJSON(w.url + w.query + w.setting).then((data) => {\n\n        var intel = {\n          location: data.query.results.channel.location,\n          currentWeather: data.query.results.channel.item.condition,\n          forecast: data.query.results.channel.item.forecast\n        }\n\n        sanitizeData(intel)\n\n        var model = new weather.Model(intel)\n\n        var view = new weather.View(model, {\n          location: $('#location'),\n          currentWeather: $('#today'),\n          forecast: $('.day')\n        })\n\n        var controller = new weather.Ctrl(model, view)\n\n        view.show().init()\n      })\n    })\n    function sanitizeData(data) {\n      let tmpDate = moment.utc(new Date(data.currentWeather.date).toISOString())\n\n      data.currentWeather.date = tmpDate.format('ddd, MMM Do YYYY h:mm A')\n\n      data.currentWeather.temp = parseInt(data.currentWeather.temp)\n\n      data.forecast.forEach((object) => {\n        object.date = moment.utc(new Date(object.date).toISOString())\n        object.date = moment(object.date).format('DD MMM')\n        object.high = parseInt(object.high)\n        object.low = parseInt(object.low)\n      })\n    }\n  })\n})"],"sourceRoot":"/source/"}