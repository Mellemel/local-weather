{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/moment/locale/cs.js","node_modules/moment/moment.js","app.js","src/js/weather.js","src/js/app.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","global","factory","_typeof","define","amd","moment","this","plural","translate","number","withoutSuffix","key","isFuture","result","months","split","monthsShort","cs","defineLocale","monthsParse","_monthsParse","RegExp","shortMonthsParse","_shortMonthsParse","longMonthsParse","_longMonthsParse","weekdays","weekdaysShort","weekdaysMin","longDateFormat","LT","LTS","L","LL","LLL","LLLL","calendar","sameDay","nextDay","nextWeek","day","lastDay","lastWeek","sameElse","relativeTime","future","past","m","mm","h","hh","d","dd","M","MM","y","yy","ordinalParse","ordinal","week","dow","doy","../moment","2","utils_hooks__hooks","hookCallback","apply","arguments","setHookCallback","callback","isArray","input","Array","Object","prototype","toString","isObject","isObjectEmpty","obj","k","isDate","Date","map","arr","fn","res","push","hasOwnProp","b","hasOwnProperty","extend","valueOf","create_utc__createUTC","format","locale","strict","createLocalOrUTC","utc","defaultParsingFlags","empty","unusedTokens","unusedInput","overflow","charsLeftOver","nullInput","invalidMonth","invalidFormat","userInvalidated","iso","parsedDateParts","meridiem","getParsingFlags","_pf","valid__isValid","_isValid","flags","parsedParts","some","isNaN","_d","getTime","invalidWeekday","_strict","undefined","bigHour","valid__createInvalid","NaN","isUndefined","copyConfig","to","from","prop","val","_isAMomentObject","_i","_f","_l","_tzm","_isUTC","_offset","_locale","momentProperties","Moment","config","updateInProgress","updateOffset","isMoment","absFloor","Math","ceil","floor","toInt","argumentForCoercion","coercedNumber","value","isFinite","compareArrays","array1","array2","dontConvert","len","min","lengthDiff","abs","diffs","warn","msg","suppressDeprecationWarnings","console","deprecate","firstTime","deprecationHandler","slice","join","stack","deprecateSimple","name","deprecations","isFunction","Function","locale_set__set","_config","_ordinalParseLenient","_ordinalParse","source","mergeConfigs","parentConfig","childConfig","Locale","set","locale_calendar__calendar","mom","now","output","_calendar","_longDateFormat","formatUpper","toUpperCase","replace","invalidDate","_invalidDate","_ordinal","relative__relativeTime","string","_relativeTime","pastFuture","diff","addUnitAlias","unit","shorthand","lowerCase","toLowerCase","aliases","normalizeUnits","units","normalizeObjectUnits","inputObject","normalizedProp","normalizedInput","addUnitPriority","priority","priorities","getPrioritizedUnits","unitsObj","sort","makeGetSet","keepTime","get_set__set","get_set__get","isValid","stringGet","stringSet","prioritized","zeroFill","targetLength","forceSign","absNumber","zerosToFill","sign","pow","max","substr","addFormatToken","token","padded","func","formatTokenFunctions","localeData","removeFormattingTokens","match","makeFormatFunction","array","formattingTokens","formatMoment","expandFormat","formatFunctions","replaceLongDateFormatTokens","localFormattingTokens","lastIndex","test","addRegexToken","regex","strictRegex","regexes","isStrict","getParseRegexForToken","unescapeFormat","regexEscape","matched","p1","p2","p3","p4","addParseToken","tokens","addWeekParseToken","_w","addTimeToArrayFromToken","_a","daysInMonth","year","month","UTC","getUTCDate","localeMonths","_months","isFormat","MONTHS_IN_FORMAT","localeMonthsShort","_monthsShort","units_month__handleStrictParse","monthName","ii","llc","toLocaleLowerCase","indexOf","localeMonthsParse","_monthsParseExact","setMonth","dayOfMonth","date","getSetMonth","getDaysInMonth","monthsShortRegex","computeMonthsParse","_monthsShortStrictRegex","_monthsShortRegex","defaultMonthsShortRegex","monthsRegex","_monthsStrictRegex","_monthsRegex","defaultMonthsRegex","cmpLenRev","shortPieces","longPieces","mixedPieces","daysInYear","isLeapYear","getIsLeapYear","createDate","ms","getFullYear","setFullYear","createUTCDate","getUTCFullYear","setUTCFullYear","firstWeekOffset","fwd","fwdlw","getUTCDay","dayOfYearFromWeeks","weekday","resYear","resDayOfYear","localWeekday","weekOffset","dayOfYear","weekOfYear","resWeek","weeksInYear","weekOffsetNext","localeWeek","_week","localeFirstDayOfWeek","localeFirstDayOfYear","getSetWeek","add","getSetISOWeek","parseWeekday","weekdaysParse","parseInt","parseIsoWeekday","localeWeekdays","_weekdays","localeWeekdaysShort","_weekdaysShort","localeWeekdaysMin","_weekdaysMin","day_of_week__handleStrictParse","weekdayName","_weekdaysParse","_shortWeekdaysParse","_minWeekdaysParse","localeWeekdaysParse","_weekdaysParseExact","_fullWeekdaysParse","getSetDayOfWeek","getDay","getSetLocaleDayOfWeek","getSetISODayOfWeek","weekdaysRegex","computeWeekdaysParse","_weekdaysStrictRegex","_weekdaysRegex","defaultWeekdaysRegex","weekdaysShortRegex","_weekdaysShortStrictRegex","_weekdaysShortRegex","defaultWeekdaysShortRegex","weekdaysMinRegex","_weekdaysMinStrictRegex","_weekdaysMinRegex","defaultWeekdaysMinRegex","minp","shortp","longp","minPieces","hFormat","hours","kFormat","lowercase","minutes","matchMeridiem","_meridiemParse","localeIsPM","charAt","localeMeridiem","isLower","normalizeLocale","chooseLocale","names","j","next","loadLocale","oldLocale","locales","globalLocale","_abbr","locale_locales__getSetGlobalLocale","values","data","locale_locales__getLocale","baseConfig","abbr","parentLocale","updateLocale","locale_locales__listLocales","keys","checkOverflow","MONTH","DATE","YEAR","HOUR","MINUTE","SECOND","MILLISECOND","_overflowDayOfYear","_overflowWeeks","WEEK","_overflowWeekday","WEEKDAY","configFromISO","allowTime","dateFormat","timeFormat","tzFormat","extendedIsoRegex","exec","basicIsoRegex","isoDates","isoTimes","tzRegex","configFromStringAndFormat","configFromString","aspNetJsonRegex","createFromInputFallback","defaults","c","currentDateArray","nowValue","_useUTC","getUTCMonth","getMonth","getDate","configFromArray","currentDate","yearToUse","dayOfYearFromWeekInfo","_dayOfYear","_nextDay","setUTCMinutes","getUTCMinutes","w","weekYear","temp","weekdayOverflow","GG","W","E","local__createLocal","gg","ISO_8601","parsedInput","skipped","stringLength","totalParsedInputLength","_meridiem","meridiemFixWrap","hour","isPm","meridiemHour","isPM","configFromStringAndArray","tempConfig","bestMoment","scoreToBeat","currentScore","score","configFromObject","minute","second","millisecond","createFromConfig","prepareConfig","preparse","configFromInput","isUTC","pickBy","moments","args","Duration","duration","years","quarters","quarter","weeks","days","seconds","milliseconds","_milliseconds","_days","_data","_bubble","isDuration","offset","separator","utcOffset","offsetFromString","matcher","matches","chunk","parts","chunkOffset","cloneWithOffset","model","clone","setTime","local","getDateOffset","round","getTimezoneOffset","getSetOffset","keepLocalTime","localAdjust","matchShortOffset","_changeInProgress","add_subtract__addSubtract","create__createDuration","getSetZone","setOffsetToUTC","setOffsetToLocal","subtract","setOffsetToParsedOffset","matchOffset","hasAlignedHourOffset","isDaylightSavingTime","isDaylightSavingTimeShifted","_isDSTShifted","other","toArray","isLocal","isUtcOffset","isUtc","ret","diffRes","aspNetRegex","isoRegex","parseIso","momentsDifference","inp","parseFloat","positiveMomentsDifference","base","isAfter","isBefore","absRound","createAdder","direction","period","dur","tmp","isAdding","getCalendarFormat","myMoment","moment_calendar__calendar","time","formats","sod","startOf","calendarFormat","localInput","endOf","isBetween","inclusivity","isSame","inputMs","isSameOrAfter","isSameOrBefore","asFloat","that","zoneDelta","delta","monthDiff","anchor2","adjust","wholeMonthDiff","anchor","moment_format__toISOString","toISOString","toDate","inputString","defaultFormatUtc","defaultFormat","postformat","humanize","fromNow","toNow","newLocaleData","isoWeekday","to_type__valueOf","unix","toObject","toJSON","moment_valid__isValid","parsingFlags","invalidAt","creationData","addWeekYearFormatToken","getter","getSetWeekYear","getSetWeekYearHelper","getSetISOWeekYear","isoWeek","getISOWeeksInYear","getWeeksInYear","weekInfo","weeksTarget","setWeekAll","dayOfYearData","getSetQuarter","getSetDayOfYear","parseMs","getZoneAbbr","getZoneName","moment__createUnix","moment__createInZone","parseZone","preParsePostFormat","lists__get","index","field","setter","listMonthsImpl","out","listWeekdaysImpl","localeSorted","shift","lists__listMonths","lists__listMonthsShort","lists__listWeekdays","lists__listWeekdaysShort","lists__listWeekdaysMin","duration_abs__abs","mathAbs","duration_add_subtract__addSubtract","duration_add_subtract__add","duration_add_subtract__subtract","absCeil","bubble","monthsFromDays","monthsToDays","daysToMonths","as","duration_as__valueOf","makeAs","alias","duration_get__get","makeGetter","substituteTimeAgo","duration_humanize__relativeTime","posNegDuration","thresholds","duration_humanize__getSetRelativeTimeRounding","roundingFunction","duration_humanize__getSetRelativeTimeThreshold","threshold","limit","withSuffix","iso_string__toISOString","iso_string__abs","Y","D","total","asSeconds","fun","defaultCalendar","defaultLongDateFormat","defaultInvalidDate","defaultOrdinal","defaultOrdinalParse","defaultRelativeTime","match1","match2","match3","match4","match6","match1to2","match3to4","match5to6","match1to3","match1to4","match1to6","matchUnsigned","matchSigned","matchTimestamp","matchWord","defaultLocaleMonths","defaultLocaleMonthsShort","parseTwoDigitYear","getSetYear","defaultLocaleWeek","defaultLocaleWeekdays","defaultLocaleWeekdaysShort","defaultLocaleWeekdaysMin","_isPm","pos","pos1","pos2","defaultLocaleMeridiemParse","getSetHour","meridiemParse","prototypeMin","prototypeMax","add_subtract__add","add_subtract__subtract","lang","isoWeekYear","getSetDayOfMonth","getSetMinute","getSetSecond","getSetMillisecond","momentPrototype__proto","get","isoWeeks","isoWeeksInYear","isDST","zoneAbbr","zoneName","dates","zone","isDSTShifted","momentPrototype","prototype__proto","firstDayOfYear","firstDayOfWeek","langData","asMilliseconds","asMinutes","asHours","asDays","asWeeks","asMonths","asYears","duration_prototype__proto","toIsoString","version","invalid","relativeTimeRounding","relativeTimeThreshold","_moment","3","WeatherModel","location","currentWeather","forecast","unitChange","Event","WeatherView","elements","_model","_elements","unitButtonClicked","_this","attach","convertUnits","WeatherCtrl","view","_view","convertUnit","sender","_sender","_listeners","toCelsius","num","toFahrenheit","_this2","forEach","high","low","notify","show","cc","html","city","region","text","init","button","$","todayWeather","highWeather","lowWeather","click","_this3","listener","Model","View","Ctrl","4","weather","document","ready","ip","url","sanitizeData","tmpDate","log","object","getJSON","state","query","encodeURI","setting","then","intel","results","channel","item","condition","./weather.js","moment/locale/cs"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","//! moment.js locale configuration\n//! locale : Czech [cs]\n//! author : petrbela : https://github.com/petrbela\n\n;(function (global, factory) {\n   typeof exports === 'object' && typeof module !== 'undefined'\n       && typeof require === 'function' ? factory(require('../moment')) :\n   typeof define === 'function' && define.amd ? define(['../moment'], factory) :\n   factory(global.moment)\n}(this, function (moment) { 'use strict';\n\n\n    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),\n        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');\n    function plural(n) {\n        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);\n    }\n    function translate(number, withoutSuffix, key, isFuture) {\n        var result = number + ' ';\n        switch (key) {\n            case 's':  // a few seconds / in a few seconds / a few seconds ago\n                return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';\n            case 'm':  // a minute / in a minute / a minute ago\n                return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');\n            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'minuty' : 'minut');\n                } else {\n                    return result + 'minutami';\n                }\n                break;\n            case 'h':  // an hour / in an hour / an hour ago\n                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');\n            case 'hh': // 9 hours / in 9 hours / 9 hours ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'hodiny' : 'hodin');\n                } else {\n                    return result + 'hodinami';\n                }\n                break;\n            case 'd':  // a day / in a day / a day ago\n                return (withoutSuffix || isFuture) ? 'den' : 'dnem';\n            case 'dd': // 9 days / in 9 days / 9 days ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'dny' : 'dní');\n                } else {\n                    return result + 'dny';\n                }\n                break;\n            case 'M':  // a month / in a month / a month ago\n                return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';\n            case 'MM': // 9 months / in 9 months / 9 months ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'měsíce' : 'měsíců');\n                } else {\n                    return result + 'měsíci';\n                }\n                break;\n            case 'y':  // a year / in a year / a year ago\n                return (withoutSuffix || isFuture) ? 'rok' : 'rokem';\n            case 'yy': // 9 years / in 9 years / 9 years ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'roky' : 'let');\n                } else {\n                    return result + 'lety';\n                }\n                break;\n        }\n    }\n\n    var cs = moment.defineLocale('cs', {\n        months : months,\n        monthsShort : monthsShort,\n        monthsParse : (function (months, monthsShort) {\n            var i, _monthsParse = [];\n            for (i = 0; i < 12; i++) {\n                // use custom parser to solve problem with July (červenec)\n                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');\n            }\n            return _monthsParse;\n        }(months, monthsShort)),\n        shortMonthsParse : (function (monthsShort) {\n            var i, _shortMonthsParse = [];\n            for (i = 0; i < 12; i++) {\n                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');\n            }\n            return _shortMonthsParse;\n        }(monthsShort)),\n        longMonthsParse : (function (months) {\n            var i, _longMonthsParse = [];\n            for (i = 0; i < 12; i++) {\n                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');\n            }\n            return _longMonthsParse;\n        }(months)),\n        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),\n        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),\n        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),\n        longDateFormat : {\n            LT: 'H:mm',\n            LTS : 'H:mm:ss',\n            L : 'DD.MM.YYYY',\n            LL : 'D. MMMM YYYY',\n            LLL : 'D. MMMM YYYY H:mm',\n            LLLL : 'dddd D. MMMM YYYY H:mm',\n            l : 'D. M. YYYY'\n        },\n        calendar : {\n            sameDay: '[dnes v] LT',\n            nextDay: '[zítra v] LT',\n            nextWeek: function () {\n                switch (this.day()) {\n                    case 0:\n                        return '[v neděli v] LT';\n                    case 1:\n                    case 2:\n                        return '[v] dddd [v] LT';\n                    case 3:\n                        return '[ve středu v] LT';\n                    case 4:\n                        return '[ve čtvrtek v] LT';\n                    case 5:\n                        return '[v pátek v] LT';\n                    case 6:\n                        return '[v sobotu v] LT';\n                }\n            },\n            lastDay: '[včera v] LT',\n            lastWeek: function () {\n                switch (this.day()) {\n                    case 0:\n                        return '[minulou neděli v] LT';\n                    case 1:\n                    case 2:\n                        return '[minulé] dddd [v] LT';\n                    case 3:\n                        return '[minulou středu v] LT';\n                    case 4:\n                    case 5:\n                        return '[minulý] dddd [v] LT';\n                    case 6:\n                        return '[minulou sobotu v] LT';\n                }\n            },\n            sameElse: 'L'\n        },\n        relativeTime : {\n            future : 'za %s',\n            past : 'před %s',\n            s : translate,\n            m : translate,\n            mm : translate,\n            h : translate,\n            hh : translate,\n            d : translate,\n            dd : translate,\n            M : translate,\n            MM : translate,\n            y : translate,\n            yy : translate\n        },\n        ordinalParse : /\\d{1,2}\\./,\n        ordinal : '%d.',\n        week : {\n            dow : 1, // Monday is the first day of the week.\n            doy : 4  // The week that contains Jan 4th is the first week of the year.\n        }\n    });\n\n    return cs;\n\n}));","//! moment.js\n//! version : 2.14.1\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, function () { 'use strict';\n\n    var hookCallback;\n\n    function utils_hooks__hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        return Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        var k;\n        for (k in obj) {\n            // even if its not own property I'd still call it non-empty\n            return false;\n        }\n        return true;\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function create_utc__createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function valid__isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            m._isValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                m._isValid = m._isValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n        }\n        return m._isValid;\n    }\n\n    function valid__createInvalid (flags) {\n        var m = create_utc__createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = utils_hooks__hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i in momentProperties) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            utils_hooks__hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (utils_hooks__hooks.deprecationHandler != null) {\n                utils_hooks__hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (utils_hooks__hooks.deprecationHandler != null) {\n            utils_hooks__hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    utils_hooks__hooks.suppressDeprecationWarnings = false;\n    utils_hooks__hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function locale_set__set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _ordinalParseLenient.\n        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function locale_calendar__calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relative__relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                get_set__set(this, unit, value);\n                utils_hooks__hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get_set__get(this, unit);\n            }\n        };\n    }\n\n    function get_set__get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function get_set__set (mom, unit, value) {\n        if (mom.isValid()) {\n            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (typeof callback === 'number') {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function units_month__handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = create_utc__createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return units_month__handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (typeof value !== 'number') {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            utils_hooks__hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get_set__get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    utils_hooks__hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        //can't just apply() to create a date:\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        //the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n\n        //the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return this._weekdaysShort[m.day()];\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return this._weekdaysMin[m.day()];\n    }\n\n    function day_of_week__handleStrictParse(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = create_utc__createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = create_utc__createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour he wants. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        ordinalParse: defaultOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return null;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                require('./locale/' + name);\n                // because defineLocale currently also sets the global locale, we\n                // want to undo that for lazy loaded locales\n                locale_locales__getSetGlobalLocale(oldLocale);\n            } catch (e) { }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function locale_locales__getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = locale_locales__getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    // treat as if there is no base config\n                    deprecateSimple('parentLocaleUndefined',\n                            'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            // backwards compat for now: also set the locale\n            locale_locales__getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, parentConfig = baseConfig;\n            // MERGE\n            if (locales[name] != null) {\n                parentConfig = locales[name]._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            locale_locales__getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function locale_locales__getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function locale_locales__listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n            utils_hooks__hooks.createFromInputFallback(config);\n        }\n    }\n\n    utils_hooks__hooks.createFromInputFallback = deprecate(\n        'moment construction falls back to js Date. This is ' +\n        'discouraged and will be removed in upcoming major ' +\n        'release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(utils_hooks__hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse)) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);\n            week = defaults(w.w, 1);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    utils_hooks__hooks.ISO_8601 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === utils_hooks__hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!valid__isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || locale_locales__getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return valid__createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!valid__isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (input === undefined) {\n            config._d = new Date(utils_hooks__hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (typeof(input) === 'object') {\n            configFromObject(config);\n        } else if (typeof(input) === 'number') {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            utils_hooks__hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (typeof(locale) === 'boolean') {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function local__createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = local__createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return valid__createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = local__createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return valid__createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return local__createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = locale_locales__getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = ((string || '').match(matcher) || []);\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            utils_hooks__hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return local__createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    utils_hooks__hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n            } else if (Math.abs(input) < 16) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    utils_hooks__hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm) {\n            this.utcOffset(this._tzm);\n        } else if (typeof this._i === 'string') {\n            this.utcOffset(offsetFromString(matchOffset, this._i));\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? local__createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?\\d*)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;\n\n    function create__createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (typeof input === 'number') {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])        * sign,\n                h  : toInt(match[HOUR])        * sign,\n                m  : toInt(match[MINUTE])      * sign,\n                s  : toInt(match[SECOND])      * sign,\n                ms : toInt(match[MILLISECOND]) * sign\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    create__createDuration.fn = Duration.prototype;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = create__createDuration(val, period);\n            add_subtract__addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (days) {\n            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);\n        }\n        if (months) {\n            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);\n        }\n        if (updateOffset) {\n            utils_hooks__hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add_subtract__add      = createAdder(1, 'add');\n    var add_subtract__subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function moment_calendar__calendar (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || local__createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units || 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input,units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input,units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            delta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        if (units === 'year' || units === 'month' || units === 'quarter') {\n            output = monthDiff(this, that);\n            if (units === 'quarter') {\n                output = output / 3;\n            } else if (units === 'year') {\n                output = output / 12;\n            }\n        } else {\n            delta = this - that;\n            output = units === 'second' ? delta / 1e3 : // 1000\n                units === 'minute' ? delta / 6e4 : // 1000 * 60\n                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60\n                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n                delta;\n        }\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function moment_format__toISOString () {\n        var m = this.clone().utc();\n        if (0 < m.year() && m.year() <= 9999) {\n            if (isFunction(Date.prototype.toISOString)) {\n                // native implementation is ~50x faster, use it when we can\n                return this.toDate().toISOString();\n            } else {\n                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n            }\n        } else {\n            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n        }\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 local__createLocal(time).isValid())) {\n            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(local__createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 local__createLocal(time).isValid())) {\n            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(local__createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = locale_locales__getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'quarter':\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n            case 'date':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === 'week') {\n            this.weekday(0);\n        }\n        if (units === 'isoWeek') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === 'quarter') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond') {\n            return this;\n        }\n\n        // 'date' is an alias for 'day', so it should be considered as such.\n        if (units === 'date') {\n            units = 'day';\n        }\n\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n    }\n\n    function to_type__valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function moment_valid__isValid () {\n        return valid__isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIOROITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0], 10);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var momentPrototype__proto = Moment.prototype;\n\n    momentPrototype__proto.add               = add_subtract__add;\n    momentPrototype__proto.calendar          = moment_calendar__calendar;\n    momentPrototype__proto.clone             = clone;\n    momentPrototype__proto.diff              = diff;\n    momentPrototype__proto.endOf             = endOf;\n    momentPrototype__proto.format            = format;\n    momentPrototype__proto.from              = from;\n    momentPrototype__proto.fromNow           = fromNow;\n    momentPrototype__proto.to                = to;\n    momentPrototype__proto.toNow             = toNow;\n    momentPrototype__proto.get               = stringGet;\n    momentPrototype__proto.invalidAt         = invalidAt;\n    momentPrototype__proto.isAfter           = isAfter;\n    momentPrototype__proto.isBefore          = isBefore;\n    momentPrototype__proto.isBetween         = isBetween;\n    momentPrototype__proto.isSame            = isSame;\n    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;\n    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;\n    momentPrototype__proto.isValid           = moment_valid__isValid;\n    momentPrototype__proto.lang              = lang;\n    momentPrototype__proto.locale            = locale;\n    momentPrototype__proto.localeData        = localeData;\n    momentPrototype__proto.max               = prototypeMax;\n    momentPrototype__proto.min               = prototypeMin;\n    momentPrototype__proto.parsingFlags      = parsingFlags;\n    momentPrototype__proto.set               = stringSet;\n    momentPrototype__proto.startOf           = startOf;\n    momentPrototype__proto.subtract          = add_subtract__subtract;\n    momentPrototype__proto.toArray           = toArray;\n    momentPrototype__proto.toObject          = toObject;\n    momentPrototype__proto.toDate            = toDate;\n    momentPrototype__proto.toISOString       = moment_format__toISOString;\n    momentPrototype__proto.toJSON            = toJSON;\n    momentPrototype__proto.toString          = toString;\n    momentPrototype__proto.unix              = unix;\n    momentPrototype__proto.valueOf           = to_type__valueOf;\n    momentPrototype__proto.creationData      = creationData;\n\n    // Year\n    momentPrototype__proto.year       = getSetYear;\n    momentPrototype__proto.isLeapYear = getIsLeapYear;\n\n    // Week Year\n    momentPrototype__proto.weekYear    = getSetWeekYear;\n    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;\n\n    // Quarter\n    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;\n\n    // Month\n    momentPrototype__proto.month       = getSetMonth;\n    momentPrototype__proto.daysInMonth = getDaysInMonth;\n\n    // Week\n    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;\n    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;\n    momentPrototype__proto.weeksInYear    = getWeeksInYear;\n    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;\n\n    // Day\n    momentPrototype__proto.date       = getSetDayOfMonth;\n    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;\n    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;\n    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;\n    momentPrototype__proto.dayOfYear  = getSetDayOfYear;\n\n    // Hour\n    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;\n\n    // Minute\n    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;\n\n    // Second\n    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;\n\n    // Millisecond\n    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;\n\n    // Offset\n    momentPrototype__proto.utcOffset            = getSetOffset;\n    momentPrototype__proto.utc                  = setOffsetToUTC;\n    momentPrototype__proto.local                = setOffsetToLocal;\n    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;\n    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    momentPrototype__proto.isDST                = isDaylightSavingTime;\n    momentPrototype__proto.isLocal              = isLocal;\n    momentPrototype__proto.isUtcOffset          = isUtcOffset;\n    momentPrototype__proto.isUtc                = isUtc;\n    momentPrototype__proto.isUTC                = isUtc;\n\n    // Timezone\n    momentPrototype__proto.zoneAbbr = getZoneAbbr;\n    momentPrototype__proto.zoneName = getZoneName;\n\n    // Deprecations\n    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    var momentPrototype = momentPrototype__proto;\n\n    function moment__createUnix (input) {\n        return local__createLocal(input * 1000);\n    }\n\n    function moment__createInZone () {\n        return local__createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var prototype__proto = Locale.prototype;\n\n    prototype__proto.calendar        = locale_calendar__calendar;\n    prototype__proto.longDateFormat  = longDateFormat;\n    prototype__proto.invalidDate     = invalidDate;\n    prototype__proto.ordinal         = ordinal;\n    prototype__proto.preparse        = preParsePostFormat;\n    prototype__proto.postformat      = preParsePostFormat;\n    prototype__proto.relativeTime    = relative__relativeTime;\n    prototype__proto.pastFuture      = pastFuture;\n    prototype__proto.set             = locale_set__set;\n\n    // Month\n    prototype__proto.months            =        localeMonths;\n    prototype__proto.monthsShort       =        localeMonthsShort;\n    prototype__proto.monthsParse       =        localeMonthsParse;\n    prototype__proto.monthsRegex       = monthsRegex;\n    prototype__proto.monthsShortRegex  = monthsShortRegex;\n\n    // Week\n    prototype__proto.week = localeWeek;\n    prototype__proto.firstDayOfYear = localeFirstDayOfYear;\n    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;\n\n    // Day of Week\n    prototype__proto.weekdays       =        localeWeekdays;\n    prototype__proto.weekdaysMin    =        localeWeekdaysMin;\n    prototype__proto.weekdaysShort  =        localeWeekdaysShort;\n    prototype__proto.weekdaysParse  =        localeWeekdaysParse;\n\n    prototype__proto.weekdaysRegex       =        weekdaysRegex;\n    prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;\n    prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    // Hours\n    prototype__proto.isPM = localeIsPM;\n    prototype__proto.meridiem = localeMeridiem;\n\n    function lists__get (format, index, field, setter) {\n        var locale = locale_locales__getLocale();\n        var utc = create_utc__createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (typeof format === 'number') {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return lists__get(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = lists__get(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = locale_locales__getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return lists__get(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = lists__get(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function lists__listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function lists__listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function lists__listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function lists__listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function lists__listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    locale_locales__getSetGlobalLocale('en', {\n        ordinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);\n    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);\n\n    var mathAbs = Math.abs;\n\n    function duration_abs__abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function duration_add_subtract__addSubtract (duration, input, value, direction) {\n        var other = create__createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function duration_add_subtract__add (input, value) {\n        return duration_add_subtract__addSubtract(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function duration_add_subtract__subtract (input, value) {\n        return duration_add_subtract__addSubtract(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'year') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function duration_as__valueOf () {\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asYears        = makeAs('y');\n\n    function duration_get__get (units) {\n        units = normalizeUnits(units);\n        return this[units + 's']();\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this._data[name];\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        s: 45,  // seconds to minute\n        m: 45,  // minutes to hour\n        h: 22,  // hours to day\n        d: 26,  // days to month\n        M: 11   // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {\n        var duration = create__createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds < thresholds.s && ['s', seconds]  ||\n                minutes <= 1           && ['m']           ||\n                minutes < thresholds.m && ['mm', minutes] ||\n                hours   <= 1           && ['h']           ||\n                hours   < thresholds.h && ['hh', hours]   ||\n                days    <= 1           && ['d']           ||\n                days    < thresholds.d && ['dd', days]    ||\n                months  <= 1           && ['M']           ||\n                months  < thresholds.M && ['MM', months]  ||\n                years   <= 1           && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        var locale = this.localeData();\n        var output = duration_humanize__relativeTime(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var iso_string__abs = Math.abs;\n\n    function iso_string__toISOString() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        var seconds = iso_string__abs(this._milliseconds) / 1000;\n        var days         = iso_string__abs(this._days);\n        var months       = iso_string__abs(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds;\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        return (total < 0 ? '-' : '') +\n            'P' +\n            (Y ? Y + 'Y' : '') +\n            (M ? M + 'M' : '') +\n            (D ? D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? h + 'H' : '') +\n            (m ? m + 'M' : '') +\n            (s ? s + 'S' : '');\n    }\n\n    var duration_prototype__proto = Duration.prototype;\n\n    duration_prototype__proto.abs            = duration_abs__abs;\n    duration_prototype__proto.add            = duration_add_subtract__add;\n    duration_prototype__proto.subtract       = duration_add_subtract__subtract;\n    duration_prototype__proto.as             = as;\n    duration_prototype__proto.asMilliseconds = asMilliseconds;\n    duration_prototype__proto.asSeconds      = asSeconds;\n    duration_prototype__proto.asMinutes      = asMinutes;\n    duration_prototype__proto.asHours        = asHours;\n    duration_prototype__proto.asDays         = asDays;\n    duration_prototype__proto.asWeeks        = asWeeks;\n    duration_prototype__proto.asMonths       = asMonths;\n    duration_prototype__proto.asYears        = asYears;\n    duration_prototype__proto.valueOf        = duration_as__valueOf;\n    duration_prototype__proto._bubble        = bubble;\n    duration_prototype__proto.get            = duration_get__get;\n    duration_prototype__proto.milliseconds   = milliseconds;\n    duration_prototype__proto.seconds        = seconds;\n    duration_prototype__proto.minutes        = minutes;\n    duration_prototype__proto.hours          = hours;\n    duration_prototype__proto.days           = days;\n    duration_prototype__proto.weeks          = weeks;\n    duration_prototype__proto.months         = months;\n    duration_prototype__proto.years          = years;\n    duration_prototype__proto.humanize       = humanize;\n    duration_prototype__proto.toISOString    = iso_string__toISOString;\n    duration_prototype__proto.toString       = iso_string__toISOString;\n    duration_prototype__proto.toJSON         = iso_string__toISOString;\n    duration_prototype__proto.locale         = locale;\n    duration_prototype__proto.localeData     = localeData;\n\n    // Deprecations\n    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);\n    duration_prototype__proto.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    utils_hooks__hooks.version = '2.14.1';\n\n    setHookCallback(local__createLocal);\n\n    utils_hooks__hooks.fn                    = momentPrototype;\n    utils_hooks__hooks.min                   = min;\n    utils_hooks__hooks.max                   = max;\n    utils_hooks__hooks.now                   = now;\n    utils_hooks__hooks.utc                   = create_utc__createUTC;\n    utils_hooks__hooks.unix                  = moment__createUnix;\n    utils_hooks__hooks.months                = lists__listMonths;\n    utils_hooks__hooks.isDate                = isDate;\n    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;\n    utils_hooks__hooks.invalid               = valid__createInvalid;\n    utils_hooks__hooks.duration              = create__createDuration;\n    utils_hooks__hooks.isMoment              = isMoment;\n    utils_hooks__hooks.weekdays              = lists__listWeekdays;\n    utils_hooks__hooks.parseZone             = moment__createInZone;\n    utils_hooks__hooks.localeData            = locale_locales__getLocale;\n    utils_hooks__hooks.isDuration            = isDuration;\n    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;\n    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;\n    utils_hooks__hooks.defineLocale          = defineLocale;\n    utils_hooks__hooks.updateLocale          = updateLocale;\n    utils_hooks__hooks.locales               = locale_locales__listLocales;\n    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;\n    utils_hooks__hooks.normalizeUnits        = normalizeUnits;\n    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;\n    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;\n    utils_hooks__hooks.calendarFormat        = getCalendarFormat;\n    utils_hooks__hooks.prototype             = momentPrototype;\n\n    var _moment = utils_hooks__hooks;\n\n    return _moment;\n\n}));","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n//! moment.js locale configuration\n//! locale : Czech [cs]\n//! author : petrbela : https://github.com/petrbela\n\n;(function (global, factory) {\n   typeof exports === 'object' && typeof module !== 'undefined'\n       && typeof require === 'function' ? factory(require('../moment')) :\n   typeof define === 'function' && define.amd ? define(['../moment'], factory) :\n   factory(global.moment)\n}(this, function (moment) { 'use strict';\n\n\n    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),\n        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');\n    function plural(n) {\n        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);\n    }\n    function translate(number, withoutSuffix, key, isFuture) {\n        var result = number + ' ';\n        switch (key) {\n            case 's':  // a few seconds / in a few seconds / a few seconds ago\n                return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';\n            case 'm':  // a minute / in a minute / a minute ago\n                return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');\n            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'minuty' : 'minut');\n                } else {\n                    return result + 'minutami';\n                }\n                break;\n            case 'h':  // an hour / in an hour / an hour ago\n                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');\n            case 'hh': // 9 hours / in 9 hours / 9 hours ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'hodiny' : 'hodin');\n                } else {\n                    return result + 'hodinami';\n                }\n                break;\n            case 'd':  // a day / in a day / a day ago\n                return (withoutSuffix || isFuture) ? 'den' : 'dnem';\n            case 'dd': // 9 days / in 9 days / 9 days ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'dny' : 'dní');\n                } else {\n                    return result + 'dny';\n                }\n                break;\n            case 'M':  // a month / in a month / a month ago\n                return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';\n            case 'MM': // 9 months / in 9 months / 9 months ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'měsíce' : 'měsíců');\n                } else {\n                    return result + 'měsíci';\n                }\n                break;\n            case 'y':  // a year / in a year / a year ago\n                return (withoutSuffix || isFuture) ? 'rok' : 'rokem';\n            case 'yy': // 9 years / in 9 years / 9 years ago\n                if (withoutSuffix || isFuture) {\n                    return result + (plural(number) ? 'roky' : 'let');\n                } else {\n                    return result + 'lety';\n                }\n                break;\n        }\n    }\n\n    var cs = moment.defineLocale('cs', {\n        months : months,\n        monthsShort : monthsShort,\n        monthsParse : (function (months, monthsShort) {\n            var i, _monthsParse = [];\n            for (i = 0; i < 12; i++) {\n                // use custom parser to solve problem with July (červenec)\n                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');\n            }\n            return _monthsParse;\n        }(months, monthsShort)),\n        shortMonthsParse : (function (monthsShort) {\n            var i, _shortMonthsParse = [];\n            for (i = 0; i < 12; i++) {\n                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');\n            }\n            return _shortMonthsParse;\n        }(monthsShort)),\n        longMonthsParse : (function (months) {\n            var i, _longMonthsParse = [];\n            for (i = 0; i < 12; i++) {\n                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');\n            }\n            return _longMonthsParse;\n        }(months)),\n        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),\n        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),\n        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),\n        longDateFormat : {\n            LT: 'H:mm',\n            LTS : 'H:mm:ss',\n            L : 'DD.MM.YYYY',\n            LL : 'D. MMMM YYYY',\n            LLL : 'D. MMMM YYYY H:mm',\n            LLLL : 'dddd D. MMMM YYYY H:mm',\n            l : 'D. M. YYYY'\n        },\n        calendar : {\n            sameDay: '[dnes v] LT',\n            nextDay: '[zítra v] LT',\n            nextWeek: function () {\n                switch (this.day()) {\n                    case 0:\n                        return '[v neděli v] LT';\n                    case 1:\n                    case 2:\n                        return '[v] dddd [v] LT';\n                    case 3:\n                        return '[ve středu v] LT';\n                    case 4:\n                        return '[ve čtvrtek v] LT';\n                    case 5:\n                        return '[v pátek v] LT';\n                    case 6:\n                        return '[v sobotu v] LT';\n                }\n            },\n            lastDay: '[včera v] LT',\n            lastWeek: function () {\n                switch (this.day()) {\n                    case 0:\n                        return '[minulou neděli v] LT';\n                    case 1:\n                    case 2:\n                        return '[minulé] dddd [v] LT';\n                    case 3:\n                        return '[minulou středu v] LT';\n                    case 4:\n                    case 5:\n                        return '[minulý] dddd [v] LT';\n                    case 6:\n                        return '[minulou sobotu v] LT';\n                }\n            },\n            sameElse: 'L'\n        },\n        relativeTime : {\n            future : 'za %s',\n            past : 'před %s',\n            s : translate,\n            m : translate,\n            mm : translate,\n            h : translate,\n            hh : translate,\n            d : translate,\n            dd : translate,\n            M : translate,\n            MM : translate,\n            y : translate,\n            yy : translate\n        },\n        ordinalParse : /\\d{1,2}\\./,\n        ordinal : '%d.',\n        week : {\n            dow : 1, // Monday is the first day of the week.\n            doy : 4  // The week that contains Jan 4th is the first week of the year.\n        }\n    });\n\n    return cs;\n\n}));\n},{\"../moment\":2}],2:[function(require,module,exports){\n//! moment.js\n//! version : 2.14.1\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n;(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    global.moment = factory()\n}(this, function () { 'use strict';\n\n    var hookCallback;\n\n    function utils_hooks__hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        return Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        var k;\n        for (k in obj) {\n            // even if its not own property I'd still call it non-empty\n            return false;\n        }\n        return true;\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function create_utc__createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function valid__isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            m._isValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                m._isValid = m._isValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n        }\n        return m._isValid;\n    }\n\n    function valid__createInvalid (flags) {\n        var m = create_utc__createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = utils_hooks__hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i in momentProperties) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            utils_hooks__hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (utils_hooks__hooks.deprecationHandler != null) {\n                utils_hooks__hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (utils_hooks__hooks.deprecationHandler != null) {\n            utils_hooks__hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    utils_hooks__hooks.suppressDeprecationWarnings = false;\n    utils_hooks__hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function locale_set__set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _ordinalParseLenient.\n        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function locale_calendar__calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relative__relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                get_set__set(this, unit, value);\n                utils_hooks__hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get_set__get(this, unit);\n            }\n        };\n    }\n\n    function get_set__get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function get_set__set (mom, unit, value) {\n        if (mom.isValid()) {\n            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (typeof callback === 'number') {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function units_month__handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = create_utc__createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return units_month__handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (typeof value !== 'number') {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            utils_hooks__hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get_set__get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    utils_hooks__hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        //can't just apply() to create a date:\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        //the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n\n        //the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return this._weekdaysShort[m.day()];\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return this._weekdaysMin[m.day()];\n    }\n\n    function day_of_week__handleStrictParse(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = create_utc__createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = create_utc__createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = create_utc__createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour he wants. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        ordinalParse: defaultOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return null;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                require('./locale/' + name);\n                // because defineLocale currently also sets the global locale, we\n                // want to undo that for lazy loaded locales\n                locale_locales__getSetGlobalLocale(oldLocale);\n            } catch (e) { }\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function locale_locales__getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = locale_locales__getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    // treat as if there is no base config\n                    deprecateSimple('parentLocaleUndefined',\n                            'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            // backwards compat for now: also set the locale\n            locale_locales__getSetGlobalLocale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, parentConfig = baseConfig;\n            // MERGE\n            if (locales[name] != null) {\n                parentConfig = locales[name]._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            locale_locales__getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function locale_locales__getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function locale_locales__listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n            utils_hooks__hooks.createFromInputFallback(config);\n        }\n    }\n\n    utils_hooks__hooks.createFromInputFallback = deprecate(\n        'moment construction falls back to js Date. This is ' +\n        'discouraged and will be removed in upcoming major ' +\n        'release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(utils_hooks__hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse)) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);\n            week = defaults(w.w, 1);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // constant that refers to the ISO standard\n    utils_hooks__hooks.ISO_8601 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === utils_hooks__hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!valid__isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || locale_locales__getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return valid__createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!valid__isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (input === undefined) {\n            config._d = new Date(utils_hooks__hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (typeof(input) === 'object') {\n            configFromObject(config);\n        } else if (typeof(input) === 'number') {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            utils_hooks__hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (typeof(locale) === 'boolean') {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function local__createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = local__createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return valid__createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = local__createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return valid__createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return local__createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = locale_locales__getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = ((string || '').match(matcher) || []);\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            utils_hooks__hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return local__createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    utils_hooks__hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n            } else if (Math.abs(input) < 16) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    utils_hooks__hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm) {\n            this.utcOffset(this._tzm);\n        } else if (typeof this._i === 'string') {\n            this.utcOffset(offsetFromString(matchOffset, this._i));\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? local__createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?\\d*)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;\n\n    function create__createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (typeof input === 'number') {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])        * sign,\n                h  : toInt(match[HOUR])        * sign,\n                m  : toInt(match[MINUTE])      * sign,\n                s  : toInt(match[SECOND])      * sign,\n                ms : toInt(match[MILLISECOND]) * sign\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    create__createDuration.fn = Duration.prototype;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = create__createDuration(val, period);\n            add_subtract__addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (days) {\n            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);\n        }\n        if (months) {\n            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);\n        }\n        if (updateOffset) {\n            utils_hooks__hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add_subtract__add      = createAdder(1, 'add');\n    var add_subtract__subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function moment_calendar__calendar (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || local__createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : local__createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units || 'millisecond');\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input,units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input,units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            delta, output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        if (units === 'year' || units === 'month' || units === 'quarter') {\n            output = monthDiff(this, that);\n            if (units === 'quarter') {\n                output = output / 3;\n            } else if (units === 'year') {\n                output = output / 12;\n            }\n        } else {\n            delta = this - that;\n            output = units === 'second' ? delta / 1e3 : // 1000\n                units === 'minute' ? delta / 6e4 : // 1000 * 60\n                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60\n                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n                delta;\n        }\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function moment_format__toISOString () {\n        var m = this.clone().utc();\n        if (0 < m.year() && m.year() <= 9999) {\n            if (isFunction(Date.prototype.toISOString)) {\n                // native implementation is ~50x faster, use it when we can\n                return this.toDate().toISOString();\n            } else {\n                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n            }\n        } else {\n            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n        }\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 local__createLocal(time).isValid())) {\n            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(local__createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 local__createLocal(time).isValid())) {\n            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(local__createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = locale_locales__getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    function startOf (units) {\n        units = normalizeUnits(units);\n        // the following switch intentionally omits break keywords\n        // to utilize falling through the cases.\n        switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'quarter':\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n            case 'date':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n        }\n\n        // weeks are a special case\n        if (units === 'week') {\n            this.weekday(0);\n        }\n        if (units === 'isoWeek') {\n            this.isoWeekday(1);\n        }\n\n        // quarters are also special\n        if (units === 'quarter') {\n            this.month(Math.floor(this.month() / 3) * 3);\n        }\n\n        return this;\n    }\n\n    function endOf (units) {\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond') {\n            return this;\n        }\n\n        // 'date' is an alias for 'day', so it should be considered as such.\n        if (units === 'date') {\n            units = 'day';\n        }\n\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n    }\n\n    function to_type__valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function moment_valid__isValid () {\n        return valid__isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIOROITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0], 10);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var momentPrototype__proto = Moment.prototype;\n\n    momentPrototype__proto.add               = add_subtract__add;\n    momentPrototype__proto.calendar          = moment_calendar__calendar;\n    momentPrototype__proto.clone             = clone;\n    momentPrototype__proto.diff              = diff;\n    momentPrototype__proto.endOf             = endOf;\n    momentPrototype__proto.format            = format;\n    momentPrototype__proto.from              = from;\n    momentPrototype__proto.fromNow           = fromNow;\n    momentPrototype__proto.to                = to;\n    momentPrototype__proto.toNow             = toNow;\n    momentPrototype__proto.get               = stringGet;\n    momentPrototype__proto.invalidAt         = invalidAt;\n    momentPrototype__proto.isAfter           = isAfter;\n    momentPrototype__proto.isBefore          = isBefore;\n    momentPrototype__proto.isBetween         = isBetween;\n    momentPrototype__proto.isSame            = isSame;\n    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;\n    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;\n    momentPrototype__proto.isValid           = moment_valid__isValid;\n    momentPrototype__proto.lang              = lang;\n    momentPrototype__proto.locale            = locale;\n    momentPrototype__proto.localeData        = localeData;\n    momentPrototype__proto.max               = prototypeMax;\n    momentPrototype__proto.min               = prototypeMin;\n    momentPrototype__proto.parsingFlags      = parsingFlags;\n    momentPrototype__proto.set               = stringSet;\n    momentPrototype__proto.startOf           = startOf;\n    momentPrototype__proto.subtract          = add_subtract__subtract;\n    momentPrototype__proto.toArray           = toArray;\n    momentPrototype__proto.toObject          = toObject;\n    momentPrototype__proto.toDate            = toDate;\n    momentPrototype__proto.toISOString       = moment_format__toISOString;\n    momentPrototype__proto.toJSON            = toJSON;\n    momentPrototype__proto.toString          = toString;\n    momentPrototype__proto.unix              = unix;\n    momentPrototype__proto.valueOf           = to_type__valueOf;\n    momentPrototype__proto.creationData      = creationData;\n\n    // Year\n    momentPrototype__proto.year       = getSetYear;\n    momentPrototype__proto.isLeapYear = getIsLeapYear;\n\n    // Week Year\n    momentPrototype__proto.weekYear    = getSetWeekYear;\n    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;\n\n    // Quarter\n    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;\n\n    // Month\n    momentPrototype__proto.month       = getSetMonth;\n    momentPrototype__proto.daysInMonth = getDaysInMonth;\n\n    // Week\n    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;\n    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;\n    momentPrototype__proto.weeksInYear    = getWeeksInYear;\n    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;\n\n    // Day\n    momentPrototype__proto.date       = getSetDayOfMonth;\n    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;\n    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;\n    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;\n    momentPrototype__proto.dayOfYear  = getSetDayOfYear;\n\n    // Hour\n    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;\n\n    // Minute\n    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;\n\n    // Second\n    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;\n\n    // Millisecond\n    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;\n\n    // Offset\n    momentPrototype__proto.utcOffset            = getSetOffset;\n    momentPrototype__proto.utc                  = setOffsetToUTC;\n    momentPrototype__proto.local                = setOffsetToLocal;\n    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;\n    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    momentPrototype__proto.isDST                = isDaylightSavingTime;\n    momentPrototype__proto.isLocal              = isLocal;\n    momentPrototype__proto.isUtcOffset          = isUtcOffset;\n    momentPrototype__proto.isUtc                = isUtc;\n    momentPrototype__proto.isUTC                = isUtc;\n\n    // Timezone\n    momentPrototype__proto.zoneAbbr = getZoneAbbr;\n    momentPrototype__proto.zoneName = getZoneName;\n\n    // Deprecations\n    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    var momentPrototype = momentPrototype__proto;\n\n    function moment__createUnix (input) {\n        return local__createLocal(input * 1000);\n    }\n\n    function moment__createInZone () {\n        return local__createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var prototype__proto = Locale.prototype;\n\n    prototype__proto.calendar        = locale_calendar__calendar;\n    prototype__proto.longDateFormat  = longDateFormat;\n    prototype__proto.invalidDate     = invalidDate;\n    prototype__proto.ordinal         = ordinal;\n    prototype__proto.preparse        = preParsePostFormat;\n    prototype__proto.postformat      = preParsePostFormat;\n    prototype__proto.relativeTime    = relative__relativeTime;\n    prototype__proto.pastFuture      = pastFuture;\n    prototype__proto.set             = locale_set__set;\n\n    // Month\n    prototype__proto.months            =        localeMonths;\n    prototype__proto.monthsShort       =        localeMonthsShort;\n    prototype__proto.monthsParse       =        localeMonthsParse;\n    prototype__proto.monthsRegex       = monthsRegex;\n    prototype__proto.monthsShortRegex  = monthsShortRegex;\n\n    // Week\n    prototype__proto.week = localeWeek;\n    prototype__proto.firstDayOfYear = localeFirstDayOfYear;\n    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;\n\n    // Day of Week\n    prototype__proto.weekdays       =        localeWeekdays;\n    prototype__proto.weekdaysMin    =        localeWeekdaysMin;\n    prototype__proto.weekdaysShort  =        localeWeekdaysShort;\n    prototype__proto.weekdaysParse  =        localeWeekdaysParse;\n\n    prototype__proto.weekdaysRegex       =        weekdaysRegex;\n    prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;\n    prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    // Hours\n    prototype__proto.isPM = localeIsPM;\n    prototype__proto.meridiem = localeMeridiem;\n\n    function lists__get (format, index, field, setter) {\n        var locale = locale_locales__getLocale();\n        var utc = create_utc__createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (typeof format === 'number') {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return lists__get(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = lists__get(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = locale_locales__getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return lists__get(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = lists__get(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function lists__listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function lists__listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function lists__listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function lists__listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function lists__listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    locale_locales__getSetGlobalLocale('en', {\n        ordinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);\n    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);\n\n    var mathAbs = Math.abs;\n\n    function duration_abs__abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function duration_add_subtract__addSubtract (duration, input, value, direction) {\n        var other = create__createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function duration_add_subtract__add (input, value) {\n        return duration_add_subtract__addSubtract(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function duration_add_subtract__subtract (input, value) {\n        return duration_add_subtract__addSubtract(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'year') {\n            days   = this._days   + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            return units === 'month' ? months : months / 12;\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function duration_as__valueOf () {\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asYears        = makeAs('y');\n\n    function duration_get__get (units) {\n        units = normalizeUnits(units);\n        return this[units + 's']();\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this._data[name];\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        s: 45,  // seconds to minute\n        m: 45,  // minutes to hour\n        h: 22,  // hours to day\n        d: 26,  // days to month\n        M: 11   // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {\n        var duration = create__createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds < thresholds.s && ['s', seconds]  ||\n                minutes <= 1           && ['m']           ||\n                minutes < thresholds.m && ['mm', minutes] ||\n                hours   <= 1           && ['h']           ||\n                hours   < thresholds.h && ['hh', hours]   ||\n                days    <= 1           && ['d']           ||\n                days    < thresholds.d && ['dd', days]    ||\n                months  <= 1           && ['M']           ||\n                months  < thresholds.M && ['MM', months]  ||\n                years   <= 1           && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        var locale = this.localeData();\n        var output = duration_humanize__relativeTime(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var iso_string__abs = Math.abs;\n\n    function iso_string__toISOString() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        var seconds = iso_string__abs(this._milliseconds) / 1000;\n        var days         = iso_string__abs(this._days);\n        var months       = iso_string__abs(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds;\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        return (total < 0 ? '-' : '') +\n            'P' +\n            (Y ? Y + 'Y' : '') +\n            (M ? M + 'M' : '') +\n            (D ? D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? h + 'H' : '') +\n            (m ? m + 'M' : '') +\n            (s ? s + 'S' : '');\n    }\n\n    var duration_prototype__proto = Duration.prototype;\n\n    duration_prototype__proto.abs            = duration_abs__abs;\n    duration_prototype__proto.add            = duration_add_subtract__add;\n    duration_prototype__proto.subtract       = duration_add_subtract__subtract;\n    duration_prototype__proto.as             = as;\n    duration_prototype__proto.asMilliseconds = asMilliseconds;\n    duration_prototype__proto.asSeconds      = asSeconds;\n    duration_prototype__proto.asMinutes      = asMinutes;\n    duration_prototype__proto.asHours        = asHours;\n    duration_prototype__proto.asDays         = asDays;\n    duration_prototype__proto.asWeeks        = asWeeks;\n    duration_prototype__proto.asMonths       = asMonths;\n    duration_prototype__proto.asYears        = asYears;\n    duration_prototype__proto.valueOf        = duration_as__valueOf;\n    duration_prototype__proto._bubble        = bubble;\n    duration_prototype__proto.get            = duration_get__get;\n    duration_prototype__proto.milliseconds   = milliseconds;\n    duration_prototype__proto.seconds        = seconds;\n    duration_prototype__proto.minutes        = minutes;\n    duration_prototype__proto.hours          = hours;\n    duration_prototype__proto.days           = days;\n    duration_prototype__proto.weeks          = weeks;\n    duration_prototype__proto.months         = months;\n    duration_prototype__proto.years          = years;\n    duration_prototype__proto.humanize       = humanize;\n    duration_prototype__proto.toISOString    = iso_string__toISOString;\n    duration_prototype__proto.toString       = iso_string__toISOString;\n    duration_prototype__proto.toJSON         = iso_string__toISOString;\n    duration_prototype__proto.locale         = locale;\n    duration_prototype__proto.localeData     = localeData;\n\n    // Deprecations\n    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);\n    duration_prototype__proto.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    utils_hooks__hooks.version = '2.14.1';\n\n    setHookCallback(local__createLocal);\n\n    utils_hooks__hooks.fn                    = momentPrototype;\n    utils_hooks__hooks.min                   = min;\n    utils_hooks__hooks.max                   = max;\n    utils_hooks__hooks.now                   = now;\n    utils_hooks__hooks.utc                   = create_utc__createUTC;\n    utils_hooks__hooks.unix                  = moment__createUnix;\n    utils_hooks__hooks.months                = lists__listMonths;\n    utils_hooks__hooks.isDate                = isDate;\n    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;\n    utils_hooks__hooks.invalid               = valid__createInvalid;\n    utils_hooks__hooks.duration              = create__createDuration;\n    utils_hooks__hooks.isMoment              = isMoment;\n    utils_hooks__hooks.weekdays              = lists__listWeekdays;\n    utils_hooks__hooks.parseZone             = moment__createInZone;\n    utils_hooks__hooks.localeData            = locale_locales__getLocale;\n    utils_hooks__hooks.isDuration            = isDuration;\n    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;\n    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;\n    utils_hooks__hooks.defineLocale          = defineLocale;\n    utils_hooks__hooks.updateLocale          = updateLocale;\n    utils_hooks__hooks.locales               = locale_locales__listLocales;\n    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;\n    utils_hooks__hooks.normalizeUnits        = normalizeUnits;\n    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;\n    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;\n    utils_hooks__hooks.calendarFormat        = getCalendarFormat;\n    utils_hooks__hooks.prototype             = momentPrototype;\n\n    var _moment = utils_hooks__hooks;\n\n    return _moment;\n\n}));\n},{}],3:[function(require,module,exports){\n/**\n * The Model. Model stores items and notifies\n * observers about changes.\n */\nfunction WeatherModel(data) {\n  this.location = data.location\n  this.currentWeather = data.currentWeather\n  this.forecast = data.forecast\n  this.unit = 'F'\n\n  this.unitChange = new Event(this)\n}\n\nWeatherModel.prototype = {\n  toCelsius: function (num) {\n    return Math.round((num - 32) * 5 / 9)\n  },\n  toFahrenheit: function (num) {\n    return Math.round((num * 9 / 5) + 32)\n  },\n  convertUnit: function () {\n    if (this.unit === 'F') {\n      this.currentWeather.temp = this.toCelsius(this.currentWeather.temp)\n      this.forecast.forEach((day) => {\n        day.high = this.toCelsius(day.high)\n        day.low = this.toCelsius(day.low)\n      })\n      this.unit = 'C'\n      this.unitChange.notify()\n    } else {\n      this.currentWeather.temp = this.toFahrenheit(this.currentWeather.temp)\n      this.forecast.forEach((day) => {\n        day.high = this.toFahrenheit(day.high)\n        day.low = this.toFahrenheit(day.low)\n      })\n      this.unit = 'F'\n      this.unitChange.notify()\n    }\n  }\n}\n\n/**\n * The View. View presents the model and provides\n * the UI events. The controller is attached to these\n * events to handle the user interraction.\n */\nfunction WeatherView(model, elements) {\n  this._model = model\n  this._elements = elements\n\n  this.unitButtonClicked = new Event(this)\n\n  var _this = this\n\n  // attach model listeners\n  this._model.unitChange.attach(() => {\n    _this.convertUnits()\n  })\n}\n\nWeatherView.prototype = {\n  show: function () {\n    let location = this._elements.location,\n      cc = this._elements.currentWeather,\n      forecast = this._elements.forecast,\n      model = this._model\n\n    location.html(model.location.city + ', ' + model.location.region)\n\n    cc.html(\n      '<h3>' + model.currentWeather.date + '</h3>' +\n      '<h3>' + model.currentWeather.text + '</h3>' +\n      '<h2><span id=\"todayWeather\">' + model.currentWeather.temp + '</span>&deg;<button id=\"button\" class=\"unit btn btn-primary\">F</button></h2>'\n      \n    )\n\n    forecast.html((index) => {\n      return '<td>' + model.forecast[index].day + '</td>' +\n        '<td>' + model.forecast[index].date + '</td>' +\n        '<td><span class=\"hweather\">' + model.forecast[index].high + '</span>&deg;<span class=\"unit\">F</span></td>' +\n        '<td><span class=\"lweather\">' + model.forecast[index].low + '</span>&deg;<span class=\"unit\">F</span></td>' +\n        '<td>' + model.forecast[index].text + '</td>'\n    })\n    return this\n\n  },\n  init: function () {\n    this._elements.button = $('#button')\n    this._elements.unit = $('.unit')\n    this._elements.todayWeather = $('#todayWeather')\n    this._elements.highWeather = $('.hweather')\n    this._elements.lowWeather = $('.lweather')\n\n    // attach listeners to HTML controls\n    var _this = this\n    this._elements.button.click(() => {\n      _this.unitButtonClicked.notify()\n    })\n  },\n  convertUnits: function () {\n    this._elements.unit.text(this._model.unit)\n\n    this._elements.todayWeather.text(this._model.currentWeather.temp)\n\n    this._elements.highWeather.text((index) => {\n      return this._model.forecast[index].high\n    })\n    this._elements.lowWeather.text((index) => {\n      return this._model.forecast[index].low\n    })\n  }\n}\n\n/**\n * The Controller. Controller responds to user actions and\n * invokes changes on the model.\n */\nfunction WeatherCtrl(model, view) {\n  this._model = model\n  this._view = view\n\n  var _this = this\n\n  this._view.unitButtonClicked.attach(() => {\n    _this.convertUnit()\n  })\n}\n\nWeatherCtrl.prototype = {\n  convertUnit: function () {\n    this._model.convertUnit()\n  }\n}\n\nfunction Event(sender) {\n  this._sender = sender\n  this._listeners = []\n}\n\nEvent.prototype = {\n  attach: function (listener) {\n    this._listeners.push(listener)\n  },\n  notify: function (args) {\n    for (let i = 0; i < this._listeners.length; i++) {\n      this._listeners[i](this._sender, args)\n    }\n  }\n}\n\nmodule.exports = {\n  Model: WeatherModel,\n  View: WeatherView,\n  Ctrl: WeatherCtrl\n}\n},{}],4:[function(require,module,exports){\nvar weather = require('./weather.js'), moment = require('moment')\nrequire('moment/locale/cs')\n\n$(document).ready(() => {\n\n  let ip = {\n    url: 'https://api.ipify.org',\n    format: '?format=json'\n  }\n\n  // retrieve ip address\n  $.get(ip.url + ip.format, (data) => {\n    let location = {\n      url: 'https://freegeoip.net/',\n      format: 'json/',\n      ip: data.ip\n    }\n\n    // get location of ip address\n    $.getJSON(location.url + location.format + location.ip, (data) => {\n      let city = data['city'], state = data['region_code']\n      if (/the/gi.test(city)) {\n        city = city.split(' ')[1]\n      }\n\n      // get weather info from yahooapis\n      let w = {\n        url: 'http://query.yahooapis.com/v1/public/yql?q=',\n        query: encodeURI('select * from weather.forecast where woeid in (select woeid from geo.places(1) where text=\"' + city + ', ' + state + '\")'),\n        setting: '&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys'\n      }\n\n      $.getJSON(w.url + w.query + w.setting).then((data) => {\n        var intel = {\n          location: data.query.results.channel.location,\n          currentWeather: data.query.results.channel.item.condition,\n          forecast: data.query.results.channel.item.forecast\n        }\n\n        sanitizeData(intel)\n\n        var model = new weather.Model(intel)\n        var view = new weather.View(model, {\n          location: $('#location'),\n          currentWeather: $('#today'),\n          forecast: $('.day')\n        })\n        var controller = new weather.Ctrl(model, view)\n\n        view.show().init()\n      })\n    })\n    function sanitizeData(data) {\n      let tmpDate = moment.utc(new Date(data.currentWeather.date).toISOString())\n      console.log(data.currentWeather.date)\n      data.currentWeather.date = tmpDate.locale('en').format('ddd, MMM Do YYYY h:mm A')\n      console.log(data.currentWeather.date)\n\n      data.currentWeather.temp = parseInt(data.currentWeather.temp)\n      \n      data.forecast.forEach((object) => {\n        object.high = parseInt(object.high)\n        object.low = parseInt(object.low)\n      })\n    }\n  })\n})\n},{\"./weather.js\":3,\"moment\":2,\"moment/locale/cs\":1}]},{},[4])\n\n","/**\n * The Model. Model stores items and notifies\n * observers about changes.\n */\nfunction WeatherModel(data) {\n  this.location = data.location\n  this.currentWeather = data.currentWeather\n  this.forecast = data.forecast\n  this.unit = 'F'\n\n  this.unitChange = new Event(this)\n}\n\nWeatherModel.prototype = {\n  toCelsius: function (num) {\n    return Math.round((num - 32) * 5 / 9)\n  },\n  toFahrenheit: function (num) {\n    return Math.round((num * 9 / 5) + 32)\n  },\n  convertUnit: function () {\n    if (this.unit === 'F') {\n      this.currentWeather.temp = this.toCelsius(this.currentWeather.temp)\n      this.forecast.forEach((day) => {\n        day.high = this.toCelsius(day.high)\n        day.low = this.toCelsius(day.low)\n      })\n      this.unit = 'C'\n      this.unitChange.notify()\n    } else {\n      this.currentWeather.temp = this.toFahrenheit(this.currentWeather.temp)\n      this.forecast.forEach((day) => {\n        day.high = this.toFahrenheit(day.high)\n        day.low = this.toFahrenheit(day.low)\n      })\n      this.unit = 'F'\n      this.unitChange.notify()\n    }\n  }\n}\n\n/**\n * The View. View presents the model and provides\n * the UI events. The controller is attached to these\n * events to handle the user interraction.\n */\nfunction WeatherView(model, elements) {\n  this._model = model\n  this._elements = elements\n\n  this.unitButtonClicked = new Event(this)\n\n  var _this = this\n\n  // attach model listeners\n  this._model.unitChange.attach(() => {\n    _this.convertUnits()\n  })\n}\n\nWeatherView.prototype = {\n  show: function () {\n    let location = this._elements.location,\n      cc = this._elements.currentWeather,\n      forecast = this._elements.forecast,\n      model = this._model\n\n    location.html(model.location.city + ', ' + model.location.region)\n\n    cc.html(\n      '<h3>' + model.currentWeather.date + '</h3>' +\n      '<h3>' + model.currentWeather.text + '</h3>' +\n      '<h2><span id=\"todayWeather\">' + model.currentWeather.temp + '</span>&deg;<button id=\"button\" class=\"unit btn btn-primary\">F</button></h2>'\n      \n    )\n\n    forecast.html((index) => {\n      return '<td>' + model.forecast[index].day + '</td>' +\n        '<td>' + model.forecast[index].date + '</td>' +\n        '<td><span class=\"hweather\">' + model.forecast[index].high + '</span>&deg;<span class=\"unit\">F</span></td>' +\n        '<td><span class=\"lweather\">' + model.forecast[index].low + '</span>&deg;<span class=\"unit\">F</span></td>' +\n        '<td>' + model.forecast[index].text + '</td>'\n    })\n    return this\n\n  },\n  init: function () {\n    this._elements.button = $('#button')\n    this._elements.unit = $('.unit')\n    this._elements.todayWeather = $('#todayWeather')\n    this._elements.highWeather = $('.hweather')\n    this._elements.lowWeather = $('.lweather')\n\n    // attach listeners to HTML controls\n    var _this = this\n    this._elements.button.click(() => {\n      _this.unitButtonClicked.notify()\n    })\n  },\n  convertUnits: function () {\n    this._elements.unit.text(this._model.unit)\n\n    this._elements.todayWeather.text(this._model.currentWeather.temp)\n\n    this._elements.highWeather.text((index) => {\n      return this._model.forecast[index].high\n    })\n    this._elements.lowWeather.text((index) => {\n      return this._model.forecast[index].low\n    })\n  }\n}\n\n/**\n * The Controller. Controller responds to user actions and\n * invokes changes on the model.\n */\nfunction WeatherCtrl(model, view) {\n  this._model = model\n  this._view = view\n\n  var _this = this\n\n  this._view.unitButtonClicked.attach(() => {\n    _this.convertUnit()\n  })\n}\n\nWeatherCtrl.prototype = {\n  convertUnit: function () {\n    this._model.convertUnit()\n  }\n}\n\nfunction Event(sender) {\n  this._sender = sender\n  this._listeners = []\n}\n\nEvent.prototype = {\n  attach: function (listener) {\n    this._listeners.push(listener)\n  },\n  notify: function (args) {\n    for (let i = 0; i < this._listeners.length; i++) {\n      this._listeners[i](this._sender, args)\n    }\n  }\n}\n\nmodule.exports = {\n  Model: WeatherModel,\n  View: WeatherView,\n  Ctrl: WeatherCtrl\n}","var weather = require('./weather.js'), moment = require('moment')\nrequire('moment/locale/cs')\n\n$(document).ready(() => {\n\n  let ip = {\n    url: 'https://api.ipify.org',\n    format: '?format=json'\n  }\n\n  // retrieve ip address\n  $.get(ip.url + ip.format, (data) => {\n    let location = {\n      url: 'https://freegeoip.net/',\n      format: 'json/',\n      ip: data.ip\n    }\n\n    // get location of ip address\n    $.getJSON(location.url + location.format + location.ip, (data) => {\n      let city = data['city'], state = data['region_code']\n      if (/the/gi.test(city)) {\n        city = city.split(' ')[1]\n      }\n\n      // get weather info from yahooapis\n      let w = {\n        url: 'http://query.yahooapis.com/v1/public/yql?q=',\n        query: encodeURI('select * from weather.forecast where woeid in (select woeid from geo.places(1) where text=\"' + city + ', ' + state + '\")'),\n        setting: '&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys'\n      }\n\n      $.getJSON(w.url + w.query + w.setting).then((data) => {\n        var intel = {\n          location: data.query.results.channel.location,\n          currentWeather: data.query.results.channel.item.condition,\n          forecast: data.query.results.channel.item.forecast\n        }\n\n        sanitizeData(intel)\n\n        var model = new weather.Model(intel)\n        var view = new weather.View(model, {\n          location: $('#location'),\n          currentWeather: $('#today'),\n          forecast: $('.day')\n        })\n        var controller = new weather.Ctrl(model, view)\n\n        view.show().init()\n      })\n    })\n    function sanitizeData(data) {\n      let tmpDate = moment.utc(new Date(data.currentWeather.date).toISOString())\n      console.log(data.currentWeather.date)\n      data.currentWeather.date = tmpDate.locale('en').format('ddd, MMM Do YYYY h:mm A')\n      console.log(data.currentWeather.date)\n\n      data.currentWeather.temp = parseInt(data.currentWeather.temp)\n      \n      data.forecast.forEach((object) => {\n        object.high = parseInt(object.high)\n        object.low = parseInt(object.low)\n      })\n    }\n  })\n})"],"sourceRoot":"/source/"}