{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/weather.js","src/js/app.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","WeatherModel","data","this","location","currentWeather","forecast","unitChange","Event","WeatherView","model","elements","_model","_elements","unitButtonClicked","_this","attach","convertUnits","unitButton","click","notify","WeatherCtrl","view","sender","_sender","_listeners","prototype","toCelsius","temp","forEach","day","high","toFahrenheit","show","cc","html","city","region","date","text","index","low","listener","push","args","Model","View","Ctrl","2","weather","$","document","ready","ip","url","format","get","sanitizeData","Date","parseInt","object","getJSON","state","test","split","w","query","encodeURI","setting","then","intel","results","channel","item","condition","./weather.js"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The Model. Model stores items and notifies\n * observers about changes.\n */\nfunction WeatherModel(data) {\n  this.location = data.location\n  this.currentWeather = data.currentWeather\n  this.forecast = data.forecast\n\n  this.unitChange = new Event(this)\n}\n\nWeatherModel.prototype = {\n  toCelsius: function () {\n    this.currentWeather.temp = (this.currentWeather.temp - 32) * 5 / 9\n    this.forecast.forEach((day) => {\n      day.high = (day.high - 32) * 5 / 9\n      day.high = (day.high - 32) * 5 / 9\n    })\n  },\n  toFahrenheit: function () {\n    this.currentWeather.temp = (this.currentWeather.temp * 9 / 5) - 32\n    this.forecast.forEach((day) => {\n      day.high = (day.high * 9 / 5) - 32\n      day.high = (day.high * 9 / 5) - 32\n    })\n  }\n}\n\n/**\n * The View. View presents the model and provides\n * the UI events. The controller is attached to these\n * events to handle the user interraction.\n */\nfunction WeatherView(model, elements) {\n  this._model = model\n  this._elements = elements\n\n  this.unitButtonClicked = new Event(this)\n\n  var _this = this\n\n  // attach model listeners\n  this._model.unitChange.attach(() => {\n    _this.convertUnits()\n  })\n\n  // attach listeners to HTML controls\n  this._elements.unitButton.click(() => {\n    _this.unitButtonClicked.notify()\n  })\n}\n\nWeatherView.prototype = {\n  show: function () {\n    let location = this._elements.location,\n      cc = this._elements.currentWeather,\n      forecast = this._elements.forecast,\n      model = this._model\n\n    location.html(model.location.city + ', ' + model.location.region)\n\n    cc.html(\n      '<h3>' + model.currentWeather.date + '</h3>' +\n      '<h1>' + model.currentWeather.temp + '<span>&deg;F</span></h1>' +\n      '<h3>' + model.currentWeather.text + '</h3>'\n    )\n\n    forecast.html((index) => {\n      return '<td>' + model.forecast[index].day + '</td>' +\n        '<td>' + model.forecast[index].date + '</td>' +\n        '<td>' + model.forecast[index].high + '<span class=\"unit\">&deg;F</span></td>' +\n        '<td>' + model.forecast[index].low + '<span class=\"unit\">&deg;F</span></td>' +\n        '<td>' + model.forecast[index].text + '</td>'\n    })\n\n  },\n  convertUnits: function () {\n\n  }\n}\n\n/**\n * The Controller. Controller responds to user actions and\n * invokes changes on the model.\n */\nfunction WeatherCtrl(model, view) {\n  this._model = model\n}\n\nfunction Event(sender) {\n  this._sender = sender\n  this._listeners = []\n}\n\nEvent.prototype = {\n  attach: function(listener) {\n    this._listeners.push(listener)\n  },\n  notify: function(args) {\n    for (let i = 0; i < this._listeners.length; i++) {\n      this._listeners[i](this._sender, args)\n    }\n  }\n}\n\nmodule.exports = {\n  Model: WeatherModel,\n  View: WeatherView,\n  Ctrl: WeatherCtrl\n}","var weather = require('./weather.js')\n\n$(document).ready(() => {\n\n  let ip = {\n    url: 'https://api.ipify.org',\n    format: '?format=json'\n  }\n\n  // retrieve ip address\n  $.get(ip.url + ip.format, (data) => {\n    let location = {\n      url: 'https://freegeoip.net/',\n      format: 'json/',\n      ip: data.ip\n    }\n\n    // get location of ip address\n    $.getJSON(location.url + location.format + location.ip, (data) => {\n      let city = data['city'], state = data['region_code']\n      if (/the/gi.test(city)) {\n        city = city.split(' ')[1]\n      }\n\n      // get weather info from yahooapis\n      let w = {\n        url: 'http://query.yahooapis.com/v1/public/yql?q=',\n        query: encodeURI('select * from weather.forecast where woeid in (select woeid from geo.places(1) where text=\"' + city + ', ' + state + '\")'),\n        setting: '&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys'\n      }\n\n      $.getJSON(w.url + w.query + w.setting).then((data) => {\n        var intel = {\n          location: data.query.results.channel.location,\n          currentWeather: data.query.results.channel.item.condition,\n          forecast: data.query.results.channel.item.forecast\n        }\n\n        sanitizeData(intel)\n        \n        var model = new weather.Model(intel)\n        var view = new weather.View(model, {\n          location: $('#location'),\n          unitButton: $('#button'),\n          currentWeather: $('#today'),\n          forecast: $('.day')\n        })\n        var controller = new weather.Ctrl(model, view)\n\n        view.show()\n      })\n    })\n    function sanitizeData(data) {\n      data.currentWeather.date = new Date(data.currentWeather.date)\n      data.currentWeather.temp = parseInt(data.currentWeather.temp)\n      data.forecast.forEach((object) => {\n        object.high = parseInt(object.high)\n        object.low = parseInt(object.low)\n      })\n    }\n  })\n})"],"sourceRoot":"/source/"}